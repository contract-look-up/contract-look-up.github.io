{"version":3,"sources":["utils/index.tsx","components/natspec/index.tsx","components/abi_caller/response/index.tsx","components/abi_caller/inputs/index.tsx","components/abi_caller/request/index.tsx","components/abi_caller/function.tsx","components/abi_caller/event.tsx","components/source_code/index.tsx","views/contract_lookup/content/index.tsx","views/contract_lookup/contract_setting/index.tsx","views/contract_importer/index.tsx","views/contract_lookup/contract_menu/index.tsx","views/contract_lookup/group_transfer/config.tsx","views/contract_lookup/group_transfer/infomation.tsx","views/contract_lookup/group_transfer/table.tsx","views/contract_lookup/group_transfer/index.tsx","views/contract_lookup/index.tsx","views/contract_lookup/states.tsx","views/router.tsx","reportWebVitals.ts","index.tsx"],"names":["functionFormatStringFromABI","abi","inputFormat","inputs","map","type","join","name","functionSourceCodeFormatFromABI","indexed","outputFormat","outputs","length","undefined","stateMutability","matchingTypeDescription","content","reg","matchGroup","exec","replaceAll","trim","bindInputs","fromData","doc","params","_","index","binded","console","log","forEach","input","secondaryType","typeEncode","endsWith","includes","splited","split","Error","push","value","toWei","toLowerCase","LogsDisplay","props","data","web3","devdoc","columns","extDesc","NatspecExt","title","dataIndex","key","render","text","dataSource","decoedLog","eth","decodeLog","raw","topics","slice","encodeObject","parseFloat","fromWei","toFixed","toUpperCase","toString","moment","unix","format","bodyStyle","padding","bordered","ResponseDisplay","record","Array","returns","output","timestempUnix","parseInt","decodeParameters","param","desc","pagination","expandable","expandedRowRender","displayDataTypes","displayObjectSize","src","rowExpandable","Option","Select","InputTextFromItem","arg","regExp","errorMessage","fieldName","required","secondary","rules","validator","inputValue","a","subInput","test","Promise","reject","resolve","Item","label","TextArea","autoSize","style","color","placeholder","addonAfter","TypeInputText","RegExp","TypeInputNumber","TypeInputAddress","CreationsMapping","allowClear","unit","CreationInputElement","lableText","e","Title","size","loading","spinning","RequestDisplay","state","onError","onHash","onReceipt","waitingResponse","width","wordBreak","wordWrap","enableClipboard","className","message","ABIFunctionCallerView","Form","useForm","form","useState","originAbi","setOriginAbi","callingState","setCallingState","sendingState","setSendingState","clearCallingState","error","result","clearSendingState","isSendCommit","resetFields","isWriteFunction","margin","marginTop","layout","onFinish","contractAddress","setTimeout","currentProvider","sendAsync","method","response","senderAddress","binedData","transaction","from","to","encodeFunctionCall","sendTransaction","on","hash","receipt","_send","call","then","outputRaw","catch","_call","display","justifyContent","htmlType","disabled","marginRight","onClick","danger","marginLeft","ABIEventCallerView","setWaitingResponse","logsData","setLogsData","values","filter","i","Contract","getPastEvents","fromBlock","toBlock","logs","reason","SourceCodeCard","language","codeStyle","sourceCode","SyntaxHighlighter","registerLanguage","solidity","FunctionContent","contract","networkID","Web3","window","ethereum","deployedAddress","networks","address","fname","utils","methods","userdoc","eventDoc","events","Details","details","Content","minHeight","background","borderLeftColor","borderLeftWidth","borderLeftStyle","ghost","onBack","subTitle","notice","paddingBottom","NetWorkTable","connected","networkid","row","status","ContractSetting","contractName","column","xxl","xl","lg","md","sm","xs","compiler","version","updatedAt","source","ContractImport","onDropFile","itemRender","openFileDialogOnClick","onDrop","directory","UploadOutlined","ContractMenu","setOwnerAddress","Sider","theme","overflow","height","position","left","breakpoint","mode","borderRight","contracts","contractObject","contractIndex","SubMenu","icon","ProfileFilled","onSelected","SettingFilled","AreaChartOutlined","abiFun","funSignFormat","encodeFunctionSignature","BarChartOutlined","transferGroups","groupObject","groupIndex","UngroupOutlined","ConfigInputer","onVerifiedConfig","isCustomRPC","setIsCustomRPC","tokenType","setTokenType","inLoading","setInLoading","checkConfig","fromValues","provider","HDWalletProvider","privateKeys","private_key","providerOrUrl","rpcurl","hdWeb3","hdweb3","hdprovider","token_type","tokenInfo","tokenAddress","token_address","config","defaultValue","onChange","setFieldsValue","url","v","tname","Password","ERC20ABI","require","InfomationDisplayer","accountInfo","setAccountInfo","nodeBlockNumber","setNodeBlockNumber","tokenBalance","setTokenBalance","all","symbol","decimals","useEffect","fetchInfo","getBlockNumber","getBalance","getAddress","balance","toBN","balanceOf","balanceBN","div","pow","balanceFloat","timer","setInterval","clearInterval","span","TransferTable","group","transferConfig","gasPrice","setGasPrice","groupSize","setGroupSize","taskState","setTaskState","needStoping","setNeedStoping","datas","info","selected","setDataSource","doTransferGroupBNB","hasPending","doTransferGroupToken","totalSentAmount","useMemo","BN","sentAmount","amount","sleep","ms","maxLimit","getTransactionCount","accountNonce","pendingTxPromise","fee","muln","add","gt","sub","nonce","once","txHash","tokenContract","balanceToken","balanceBNB","feeBNBMin","lt","decimalsPowSub4","Math","floor","mul","txSender","transfer","send","marginBottom","CaretRightOutlined","StopOutlined","BugOutlined","pageSize","GroupTransfer","setConfig","c","readContractAsync","file","reader","FileReader","readAsText","onload","longContract","JSON","parse","shotContract","readExeclAsync","event","workbook","xlsx","target","sheet","Sheets","hasOwnProperty","concat","sheet_to_json","Object","keys","readAsBinaryString","ContractLookupPage","setTransferGroups","setContracts","netWorkID","setNetWorkID","contentState","setContetState","RenderContentView","onCheckedCompiledContract","files","dataTransfer","jsonReaders","xlsxReaders","fileName","dropedContract","groups","net","getId","netID","paths","keyPath","toLocaleLowerCase","startsWith","substring","find","StateCreator","readers","BasicRoute","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3ad6b4dc.chunk.js","sourcesContent":["import { AbiItem } from 'web3-utils';\n\nexport function functionFormatStringFromABI(abi: AbiItem): string {\n    let inputFormat = abi.inputs?.map((abi) => {\n        return abi.type\n    }).join(',');\n\n    return `${abi.name}(${inputFormat})`;\n}\n\nexport function functionSourceCodeFormatFromABI(abi: AbiItem): string {\n\n    let inputFormat = abi.inputs?.map((abi) => {\n        if (abi.indexed) {\n            return `\\t${abi.type} indexed ${abi.name}`\n        } else {\n            return `\\t${abi.type} ${abi.name}`\n        }\n\n    }).join(',\\n');\n\n    let outputFormat = abi.outputs?.map((abi) => {\n        return \"\\t\" + abi.type + (abi.name.length > 0 ? ` ${abi.name}` : \"\")\n    }).join(',\\n')\n\n    let name = `${abi.type} ${abi.name}(${abi.inputs?.length === 0 ? \"\" : `\\n${inputFormat}\\n`})${abi.stateMutability === undefined ? '' : ' ' + abi.stateMutability}`\n\n    if (abi.type === 'function') {\n        if (outputFormat !== undefined && outputFormat?.length > 0) {\n            name = name + ` returns (\\n${outputFormat}\\n)`\n        }\n    }\n\n    return name + \";\";\n}","import { AbiItem, toWei, fromWei, Unit } from 'web3-utils'\nimport moment from 'moment';\n\nexport interface DevMethodDoc {\n    details?: string,\n    params?: any,\n    returns?: any\n}\n\nexport interface UserMethodDoc {\n    notice?: string,\n}\n\nexport interface UserDocs {\n    kind?: string,\n    methods?: any,\n    version?: number\n}\n\nexport interface DeveloperDocs {\n    kind?: string,\n    events?: any,\n    methods?: any,\n    version?: number,\n    stateVariables?: any[],\n}\n\nexport interface NatspecDocs {\n    userdoc: UserDocs,\n    devdoc: DeveloperDocs\n}\n\nexport type SecondaryType =\n    '$amount:ether' |\n    '$amount:szabo' |\n    '$amount:mwei' |\n    '$number' |\n    '$timestemp'\n\nexport interface ExtDescription {\n    content: string,\n    // 次要类型缺失时，按照主类型处理即可，比如address类型\n    type?: SecondaryType\n}\n\n// 获取在注释中定义的类型信息,如 $number, $timestemp 等\nexport function matchingTypeDescription(content?: string): ExtDescription | undefined {\n    if (content === undefined) {\n        return undefined;\n    }\n\n    const reg = /\\s?\\$[a-z]+(:[a-z]+)?\\s?/gi;\n    const matchGroup = reg.exec(content)\n\n    return {\n        content: content.replaceAll(reg, \"\"),\n        type: matchGroup == null ? undefined : matchGroup[0].trim() as SecondaryType,\n    };\n}\n\n// 由于有一些配置了次要类型的字段，需要就行转换此处需要根据次要类型列表生产实际的最终交易参数，\n// 特别是处理的amount类型的次要类型,参数的字段需要严格按照input的顺序输入\nexport function bindInputs(abi: AbiItem, fromData: any[], doc?: DevMethodDoc): any[] {\n\n    // 没有定义Doc的情况，直接返回原值\n    if (doc?.params === undefined) {\n        return abi.inputs?.map((_, index) => fromData[index])!\n    }\n\n    // 参数的类型列表\n    const binded: Array<any> = [];\n\n    console.log(fromData);\n\n    abi.inputs?.forEach((input, index) => {\n        // 获取函数的extDesc对象\n        const secondaryType = matchingTypeDescription(doc.params[input.name])?.type;\n        const typeEncode = input.type + (secondaryType ? secondaryType : '');\n\n        if (input.type.endsWith('[]')) {\n            // 只需要转换$amount类型\n            if (typeEncode.includes('$amount:')) {\n                const splited = typeEncode.split(':');\n                if (splited.length !== 2) {\n                    throw Error(`无效的次要类型定义\"${typeEncode}\"在\"${input.name}\"中，请检查源代码natspec风格注释的[次要类型定义符](在不确定类型的情况下发送交易会导致严重的数据问题).`);\n                }\n\n                binded.push(\n                    (fromData[index] as string).split('\\n').map((value) => toWei(value, splited[1] as Unit))\n                )\n            }\n            else {\n                binded.push((fromData[index] as string).split('\\n'))\n            }\n        } else {\n            // 只需要转换$amount类型\n            if (typeEncode.includes('$amount:')) {\n                const splited = typeEncode.split(':');\n                if (splited.length !== 2) {\n                    throw Error(`无效的次要类型定义\"${typeEncode}\"在\"${input.name}\"中，请检查源代码natspec风格注释的[次要类型定义符](在不确定类型的情况下发送交易会导致严重的数据问题).`);\n                }\n\n                binded.push(toWei(fromData[index], splited[1] as Unit))\n            }\n            // 处理bool类型\n            else if (input.type === \"bool\") {\n                binded.push((fromData[index] as string).toLowerCase() === 'true' ? true : false)\n            }\n            else {\n                binded.push(fromData[index])\n            }\n        }\n    });\n\n    return binded;\n}\n\nexport function bindLogs(abi: AbiItem, fromData: { [key: string]: any }, doc?: DevMethodDoc): { [key: string]: any } {\n    // 没有定义Doc的情况，直接返回原值\n    if (doc === undefined) {\n        return fromData;\n    }\n\n    // 参数的类型列表\n    const encodeObject: any = { }\n\n    abi.inputs?.forEach((input, index) => {\n        // 获取函数的extDesc对象\n        const secondaryType = matchingTypeDescription(doc.params[input.name])?.type;\n        const typeEncode = input.type + (secondaryType ? secondaryType : '');\n        const value = fromData[index];\n\n        // 只需要转换$amount类型\n        if (typeEncode.includes('$amount:')) {\n            const splited = typeEncode.split(':');\n            if (splited.length !== 2) {\n                throw Error(`无效的次要类型定义\"${typeEncode}\"在\"${input.name}\"，请检查源代码natspec风格注释的[次要类型定义符](在不确定类型的情况下发送交易会导致严重的数据问题).`);\n            }\n\n            if (input.type.endsWith('[]')) {\n                encodeObject[input.name] =\n                    (fromData[index] as string[]).map((value) => parseFloat(\n                        fromWei(\n                            value,\n                            splited[1] as Unit\n                        )\n                    ).toFixed(8) + ` ${splited[1].toUpperCase()}`)\n\n\n            } else {\n                encodeObject[input.name] = parseFloat(fromWei(fromData[index], splited[1] as Unit)).toString() + ` ${splited[1].toUpperCase()}`\n            }\n        } else if (typeEncode.includes('$timestemp')) {\n            encodeObject[input.name] = moment.unix(value).format('YYYY-MM-DD HH:mm:ss')\n        } else {\n            encodeObject[input.name] = value;\n        }\n    });\n\n    return encodeObject;\n}\n\nexport function bindOutputs(abi: AbiItem, fromData: { [key: string]: any }, doc?: DevMethodDoc): { [key: string]: any } {\n    // 没有定义Doc的情况，直接返回原值\n    if (doc?.returns === undefined) {\n        return fromData;\n    }\n\n    // 参数的类型列表\n    const binded: Array<any> = [];\n\n    abi.outputs?.forEach((output, index) => {\n        // 获取函数的extDesc对象\n        const secondaryType = matchingTypeDescription(doc.returns[output.name])?.type;\n        const typeEncode = output.type + (secondaryType ? secondaryType : '');\n\n        // 只需要转换$amount类型\n        if (typeEncode.includes('$amount:')) {\n            const splited = typeEncode.split(':');\n            if (splited.length !== 2) {\n                throw Error(`无效的次要类型定义\"${typeEncode}\"在\"${output.name}\"，请检查源代码natspec风格注释的[次要类型定义符](在不确定类型的情况下发送交易会导致严重的数据问题).`);\n            }\n\n            if (output.type.endsWith('[]')) {\n                binded.push(\n                    (fromData[index] as string[]).map((value) => parseFloat(\n                        fromWei(\n                            value,\n                            splited[1] as Unit\n                        )\n                    ).toFixed(8) + ` ${splited[1].toUpperCase()}`)\n                )\n            } else {\n                binded.push(parseFloat(fromWei(fromData[index], splited[1] as Unit)).toString() + ` ${splited[1].toUpperCase()}`)\n            }\n        } else if (typeEncode.includes('$timestemp')) {\n            const timestempUnix = parseInt(fromData[index]);\n\n            binded.push(\n                timestempUnix > 0\n                    ? moment.unix(timestempUnix).format('YYYY-MM-DD HH:mm:ss')\n                    : \"无\"\n            )\n        }\n        else {\n            binded.push(fromData[index])\n        }\n    });\n\n    return binded;\n}","import Web3 from 'web3';\nimport { EventData } from 'web3-eth-contract';\nimport { AbiItem } from 'web3-utils';\nimport { Table, Card } from 'antd';\nimport { DevMethodDoc } from '../../natspec'\nimport ReactJson from 'react-json-view';\nimport * as NatspecExt from '../../natspec'\n\nexport function LogsDisplay(props: {\n    abi: AbiItem,\n    data?: EventData[],\n    web3: Web3,\n    devdoc?: DevMethodDoc\n}) {\n    const { abi, data, web3, devdoc } = props;\n\n    const columns =\n        abi.inputs?.map(input => {\n            const extDesc = devdoc && devdoc.params && devdoc.params[input.name]\n                ? NatspecExt.matchingTypeDescription(devdoc.params[input.name])\n                : undefined;\n            return {\n                title: extDesc !== undefined ? extDesc.content : input.name,\n                dataIndex: input.name,\n                key: input.name,\n                render: (text: string) => <span>{text}</span>\n            }\n        });\n\n    const dataSource = data?.map((log, index) => {\n        const decoedLog = web3.eth.abi.decodeLog(abi.inputs!, log.raw.data, log.raw.topics.slice(1))\n        return NatspecExt.bindLogs(abi, decoedLog, props.devdoc)\n    })\n\n    return (\n        <Card title=\"Fethed Logs\" bodyStyle={{ padding: 0 }}>\n            <Table\n                columns={columns}\n                dataSource={dataSource}\n                bordered\n            // pagination={false}\n            />\n        </Card>\n    )\n}\n\nexport function ResponseDisplay(props: {\n    abi: AbiItem,\n    data: string,\n    web3: Web3,\n    devdoc?: DevMethodDoc\n}) {\n    const { abi, data, web3, devdoc } = props;\n\n    const columns = [\n        {\n            title: '参数名',\n            dataIndex: 'param',\n            key: 'param',\n            render: (text: string) => <span>{text}</span>\n        },\n        {\n            title: '类型',\n            dataIndex: 'type',\n            key: 'type',\n            render: (text: string) => <span>{text}</span>\n        },\n        {\n            title: '描述',\n            dataIndex: 'desc',\n            key: 'desc',\n            render: (text: string) => <span>{text}</span>\n        },\n        {\n            title: '返回值',\n            dataIndex: 'value',\n            key: 'value',\n            render: (text: any, record: any) => <span>\n                {(record.type as string).endsWith('[]') ? (record.type as string).replaceAll('[]', `[${text.length}]`) : text}\n            </span>,\n        }\n    ]\n\n    const outputs = new Array<{\n        key: number,\n        param: string,\n        type: string,\n        value: string | Object,\n        desc?: string,\n    }>()\n\n    if (abi.outputs !== undefined && abi.outputs.length > 0) {\n        const values = web3.eth.abi.decodeParameters(\n            abi.outputs,\n            data\n        )\n\n        const binded = NatspecExt.bindOutputs(abi, values, props.devdoc)\n\n        abi.outputs.forEach((output, index) => {\n            const extDesc = devdoc && devdoc.returns && devdoc.returns[output.name]\n                ? NatspecExt.matchingTypeDescription(devdoc.returns[output.name])\n                : undefined;\n\n            outputs.push({\n                key: index,\n                param: output.name !== undefined && output.name.length > 0 ? output.name : '未命名',\n                type: output.type,\n                value: typeof binded[index] === 'boolean' ? (binded[index] ? '是' : '否') : binded[index],\n                desc: extDesc !== undefined ? extDesc.content : \"无\"\n            })\n        })\n    }\n\n    return (\n        <Card title=\"Outputs\" bodyStyle={{ padding: 0 }}>\n            <Table\n                columns={columns}\n                dataSource={outputs}\n                bordered\n                pagination={false}\n                expandable={{\n                    expandedRowRender: (record) => {\n                        return (\n                            <ReactJson displayDataTypes={false} displayObjectSize={false} src={record.value as Object} />\n                        )\n                    },\n                    rowExpandable: record => record.type.endsWith('[]')\n                }}\n            />\n        </Card>\n    )\n}\n\n","import { AbiInput } from 'web3-utils';\nimport { Form, Input, Select } from 'antd';\nimport { SecondaryType, matchingTypeDescription } from '../../natspec'\n\nconst { Option } = Select;\n\ntype InputCreateHandle = (input: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => JSX.Element\n\nconst InputTextFromItem = (\n    arg: AbiInput,\n    regExp: RegExp,\n    errorMessage: string,\n    fieldName: string,\n    desc: string,\n    required: boolean,\n    secondary?: SecondaryType\n) => {\n    const rules =\n        [\n            {\n                validator: async (_: any, inputValue: string) => {\n                    if (arg.type.endsWith('[]')) {\n                        for (let subInput of inputValue.split('\\n')) {\n                            if (!regExp.test(subInput)) {\n                                return Promise.reject(new Error(errorMessage))\n                            }\n                        }\n                        return Promise.resolve();\n\n                    } else {\n                        if ((inputValue === undefined || inputValue.length <= 0) && !required) {\n                            return Promise.resolve();\n                        }\n                        return !regExp.test(inputValue)\n                            ? Promise.reject(new Error(errorMessage))\n                            : Promise.resolve();\n                    }\n                },\n            },\n        ];\n\n    return (\n        <Form.Item\n            name={fieldName}\n            label={desc}\n            rules={rules}\n            required={required}\n        >\n            {\n                arg.type.endsWith('[]')\n                    ?\n                    <div>\n                        <Input.TextArea autoSize={true} />\n                        <span style={{\n                            color: 'blue'\n                        }}>{`* 该字段类型为${arg.type.toUpperCase()},请在输入框中已换行分割每一个元素。`}</span>\n                    </div>\n                    : <Input placeholder=\"\" addonAfter={arg.type.toUpperCase()} />\n            }\n        </Form.Item>\n    )\n}\n\nconst TypeInputText: InputCreateHandle = (arg: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => {\n    return InputTextFromItem(arg, new RegExp('.+'), '该字段不能为空', name, desc, required, secondary)\n}\n\nconst TypeInputNumber: InputCreateHandle = (arg: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => {\n    return InputTextFromItem(arg, new RegExp('.+'), '该字段不能为空', name, desc, required, secondary)\n}\n\nconst TypeInputBoolean: InputCreateHandle = (arg: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => {\n    return (\n        <Form.Item name={name} label={desc} required={required} >\n            <Select\n                placeholder=\"请选择\"\n                allowClear\n            >\n                <Option value=\"true\">是</Option>\n                <Option value=\"false\">否</Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nconst TypeInputAddress: InputCreateHandle = (arg: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => {\n    return InputTextFromItem(\n        arg,\n        new RegExp('^0x([0-9]|[a-z]|[A-Z]){40}$'), '请输入一个正确的十六进制地址，已0x开头',\n        name,\n        desc,\n        required,\n        secondary\n    )\n}\n\nconst TypeInputAmount: InputCreateHandle = (arg: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => {\n    const unit = secondary!.toString().split(':')[1];\n    return (\n        <Form.Item name={name} label={desc} required={required}>\n            <Input type=\"number\" name={name} placeholder=\"\" addonAfter={unit.toUpperCase()} />\n        </Form.Item >\n    )\n}\n\nconst CreationsMapping = {\n    \"bool\": TypeInputBoolean,\n    \"string\": TypeInputText,\n    \"address\": TypeInputAddress,\n    \"address[]\": TypeInputAddress,\n    \"int256\": TypeInputNumber,\n    \"uint256\": {\n        undefined: TypeInputNumber,\n        '$amount:ether': TypeInputAmount\n    }\n} as any\n\nfunction CreationInputElement(input: AbiInput, name: string, desc?: string): JSX.Element {\n\n    const extDesc = matchingTypeDescription(desc)\n    const lableText = input.name + (extDesc ? ` (${extDesc.content})` : '')\n\n    try {\n        if (typeof CreationsMapping[input.type] == 'function') {\n            return CreationsMapping[input.type](input, name, lableText, !input.indexed, extDesc?.type)\n        }\n        else if (\n            typeof CreationsMapping[input.type] == 'object' &&\n            extDesc?.type\n        ) {\n            return CreationsMapping[input.type][extDesc!.type](input, name, lableText, !input.indexed, extDesc?.type)\n        }\n\n        throw Error(\"Can not find type\")\n\n    } catch (e) {\n        return TypeInputText(input, name, lableText, !input.indexed, extDesc?.type)\n    }\n}\n\nexport default CreationInputElement;","import { Card, Space, Spin } from 'antd';\nimport ReactJson from 'react-json-view';\n\nexport interface TxSendingState {\n    waitingResponse: boolean;\n    onHash?: string,\n    onError?: any,\n    onReceipt?: any,\n}\n\nfunction Title(props: { loading: boolean }) {\n    return (\n        <Space size=\"middle\" >\n            {props.loading ? 'Pending' : 'Result'}\n            <Spin size=\"small\" spinning={props.loading} />\n        </Space>\n    )\n}\n\nexport function RequestDisplay(props: {\n    state: TxSendingState\n}) {\n    return props.state.onError === undefined\n        && props.state.onHash === undefined\n        && props.state.onReceipt === undefined\n        ? null\n        : (\n            <Card\n                style={{\n                    padding: 0,\n                }}\n                title={<Title loading={props.state.waitingResponse} />}>\n                {props.state.onHash !== undefined ? <Card style={{ padding: 0 }} title=\"Hash\">{props.state.onHash}</Card> : null}\n                {\n                    props.state.onReceipt !== undefined\n                        ? <Card style={{ padding: 0 }} title=\"Receipt\">\n                            <ReactJson\n                                style={{\n                                    width: '100%',\n                                    wordBreak: 'break-all',\n                                    wordWrap: 'break-word',\n                                }}\n                                enableClipboard={false}\n                                displayDataTypes={false}\n                                displayObjectSize={false}\n                                src={props.state.onReceipt as Object}\n                            />\n                        </Card>\n                        : null\n                }\n                {props.state.onError !== undefined ? <Card style={{ padding: 0 }} title=\"Error\" className=\"errorMessage\">{props.state.onError.message}</Card> : null}\n            </Card>\n        )\n}","import Web3 from 'web3';\nimport { useState } from 'react';\nimport { AbiItem } from 'web3-utils';\nimport { Form, Button, Card } from 'antd';\nimport * as NatspecExt from '../natspec'\nimport { ResponseDisplay } from './response'\nimport './index.scss'\nimport './inputs'\nimport CreationInputElement from './inputs';\nimport { TxSendingState, RequestDisplay } from './request';\n\ninterface TxCallingState {\n    waitingResponse: boolean,\n    error?: Error,\n    result?: any\n}\n\nexport function ABIFunctionCallerView(props: {\n    web3: Web3,\n    abi: AbiItem,\n    contractAddress?: string,\n    devdoc?: NatspecExt.DevMethodDoc,\n    userdoc?: NatspecExt.UserMethodDoc,\n    style?: React.CSSProperties,\n    className?: string\n}) {\n    const [form] = Form.useForm();\n    const [originAbi, setOriginAbi] = useState<AbiItem>();\n    const [callingState, setCallingState] = useState<TxCallingState>({\n        waitingResponse: false,\n    });\n\n    const [sendingState, setSendingState] = useState<TxSendingState>({\n        waitingResponse: false,\n        onHash: undefined,\n        onReceipt: undefined,\n        onError: undefined\n    })\n\n    const clearCallingState = () => {\n        setCallingState({\n            waitingResponse: false,\n            error: undefined,\n            result: undefined\n        })\n    }\n    const clearSendingState = () => {\n        setSendingState({\n            waitingResponse: false,\n            onHash: undefined,\n            onReceipt: undefined,\n            onError: undefined\n        })\n    }\n\n    let isSendCommit = false\n\n    if (originAbi !== props.abi) {\n        form.resetFields();\n        setOriginAbi(props.abi);\n        setCallingState({\n            waitingResponse: false,\n        });\n        clearSendingState();\n    }\n\n    // 该方法是否需要Send\n    const isWriteFunction = ['nonpayable', 'payable'].includes(props.abi.stateMutability!.toString())\n\n    function _send(fromData: any) {\n\n        clearSendingState();\n        clearCallingState();\n\n        if (props.contractAddress === undefined) {\n            setSendingState({\n                waitingResponse: false,\n                onError: new Error('当前连接的网络，并未部署当前合约的实例，请检查networks或者当前连接的网络是否正确。'),\n            });\n\n            return;\n        }\n\n        setSendingState({ waitingResponse: true })\n\n        return new Promise<void>((resolve, reject) => {\n            setTimeout(() => {\n                try {\n                    (props.web3.currentProvider as any).sendAsync({\n                        method: \"eth_requestAccounts\"\n                    }, async (error: Error, response: any) => {\n                        if (error == null) {\n\n                            const senderAddress = response.result[0];\n                            let binedData = [];\n                            if (props.abi.inputs !== undefined && props.abi.inputs.length > 0) {\n                                binedData = NatspecExt.bindInputs(props.abi, fromData, props.devdoc);\n                            }\n\n                            const transaction = {\n                                from: senderAddress,\n                                to: props.contractAddress,\n                                data: props.web3.eth.abi.encodeFunctionCall(\n                                    props.abi,\n                                    binedData.map((value) => value)\n                                )\n                            }\n\n                            let onHash: string;\n\n                            props.web3.eth.sendTransaction(transaction)\n                                .on(\"transactionHash\", hash => {\n                                    setSendingState({\n                                        waitingResponse: true,\n                                        onHash: hash,\n                                    })\n                                    onHash = hash;\n                                })\n                                .on(\"receipt\", receipt => {\n                                    setSendingState({\n                                        waitingResponse: false,\n                                        onHash: onHash,\n                                        onReceipt: receipt,\n                                    })\n                                })\n                                .on(\"error\", error => {\n                                    setSendingState({\n                                        waitingResponse: false,\n                                        onError: error\n                                    })\n                                })\n                        } else {\n                            setSendingState({\n                                waitingResponse: false,\n                                onError: error,\n                            });\n                        }\n                    })\n                } catch (e) {\n                    setSendingState({\n                        waitingResponse: false,\n                        onError: e as Error,\n                        onReceipt: undefined,\n                        onHash: undefined,\n                    });\n                }\n            }, 500);\n        })\n    }\n\n    function _call(fromData: any) {\n\n        clearSendingState();\n        clearCallingState();\n\n        if (props.contractAddress === undefined) {\n            setCallingState({\n                waitingResponse: false,\n                error: new Error('当前连接的网络，并未部署当前合约的实例，请检查networks或者当前连接的网络是否正确。'),\n            })\n            return;\n        }\n\n        setCallingState({\n            waitingResponse: true,\n        });\n\n        return new Promise<void>((resolve, reject) => {\n            setTimeout(() => {\n                try {\n                    (props.web3.currentProvider as any).sendAsync({\n                        method: \"eth_requestAccounts\"\n                    }, async (error: Error, response: any) => {\n                        if (error == null) {\n\n                            const senderAddress = response.result[0];\n                            let binedData = [];\n                            if (props.abi.inputs !== undefined && props.abi.inputs.length > 0) {\n                                binedData = NatspecExt.bindInputs(props.abi, fromData, props.devdoc);\n                            }\n\n                            const transaction = {\n                                from: senderAddress,\n                                to: props.contractAddress,\n                                data: props.web3.eth.abi.encodeFunctionCall(\n                                    props.abi,\n                                    binedData.map((value) => value)\n                                )\n                            }\n\n                            props.web3.eth.call(transaction)\n                                .then(outputRaw => {\n                                    setCallingState({\n                                        waitingResponse: false,\n                                        result: outputRaw\n                                    });\n                                })\n                                .catch(e => {\n                                    setCallingState({\n                                        waitingResponse: false,\n                                        error: e as Error\n                                    });\n                                });\n\n                        } else {\n                            setCallingState({\n                                waitingResponse: false,\n                                error: error,\n                            });\n                        }\n                    })\n                } catch (e) {\n                    setCallingState({\n                        waitingResponse: false,\n                        error: e as Error\n                    });\n                }\n            }, 500);\n        })\n    }\n\n    return (\n        <div style={props.style} className={props.className}>\n            <Card title=\"Inputs\" style={{\n                width: \"100%\",\n                padding: \"0px\",\n                margin: \"0px\",\n                marginTop: \"20px\",\n            }}>\n                <Form\n                    form={form}\n                    layout=\"vertical\"\n                    onFinish={\n                        (data) => {\n                            isSendCommit\n                                ? _send(data)\n                                : _call(data)\n                        }}\n                >\n                    {\n                        props.abi.inputs === undefined || props.abi.inputs?.length <= 0\n                            ? null\n                            : props.abi.inputs?.map((arg, index) =>\n                                CreationInputElement(\n                                    arg,\n                                    `${index}`,\n                                    props.devdoc\n                                        && props.devdoc.params\n                                        && props.devdoc.params[arg.name]\n                                        ? props.devdoc.params[arg.name]\n                                        : undefined\n                                )\n                            )\n                    }\n                    <Form.Item>\n                        <div style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\"\n                        }}>\n                            <Button\n                                type=\"primary\"\n                                size=\"large\"\n                                htmlType=\"submit\"\n                                loading={callingState.waitingResponse}\n                                disabled={sendingState.waitingResponse}\n                                style={{\n                                    width: \"100%\",\n                                    marginRight: isWriteFunction ? \"20px\" : \"0px\"\n                                }}\n                                onClick={() => {\n                                    isSendCommit = false\n                                }}\n                            >\n                                Call\n                            </Button>\n                            {\n                                isWriteFunction\n                                    ? <Button\n                                        type=\"primary\"\n                                        danger\n                                        size=\"large\"\n                                        htmlType=\"submit\"\n                                        loading={sendingState.waitingResponse}\n                                        disabled={callingState.waitingResponse}\n                                        style={{\n                                            width: \"100%\",\n                                            marginLeft: \"20px\"\n                                        }}\n                                        onClick={() => {\n                                            isSendCommit = true\n                                        }}\n                                    >\n                                        Send\n                                    </Button>\n                                    : null\n                            }\n                        </div>\n                    </Form.Item>\n                </Form>\n            </Card>\n            {\n                callingState.result\n                    ? <ResponseDisplay\n                        web3={props.web3}\n                        abi={props.abi}\n                        data={callingState.result}\n                        devdoc={props.devdoc}\n                    />\n                    : null\n            }\n            {\n                callingState.error\n                    ? <Card\n                        className=\"errorMessage\"\n                        title=\"Error Infomation\"\n                    >\n                        {callingState.error.message}\n                    </Card>\n                    : null\n            }\n            <RequestDisplay state={sendingState} />\n        </div>\n    )\n}","import Web3 from 'web3';\nimport { EventData } from 'web3-eth-contract';\nimport { useState } from 'react';\nimport { AbiItem } from 'web3-utils';\nimport { Form, Button, Card } from 'antd';\nimport * as NatspecExt from '../natspec'\nimport { LogsDisplay } from './response'\nimport CreationInputElement from './inputs';\n\nimport './index.scss'\nimport './inputs'\n\nexport function ABIEventCallerView(props: {\n    web3: Web3,\n    abi: AbiItem,\n    contractAddress: string,\n    devdoc?: NatspecExt.DevMethodDoc,\n    userdoc?: NatspecExt.UserMethodDoc,\n    style?: React.CSSProperties,\n    className?: string\n}) {\n    const { web3 } = props;\n    const [form] = Form.useForm();\n    const [originAbi, setOriginAbi] = useState<AbiItem>();\n    const [waitingResponse, setWaitingResponse] = useState(false);\n    const [logsData, setLogsData] = useState<EventData[]>();\n\n    if (originAbi !== props.abi) {\n        form.resetFields();\n        setOriginAbi(props.abi);\n        setWaitingResponse(false);\n        setLogsData([])\n    }\n\n    function doFetchLogs(values: any) {\n        setWaitingResponse(true);\n\n        const filter: any = { }\n\n        props.abi.inputs?.filter(input => input.indexed)\n            .forEach((input, i) => {\n                filter[input.name] = values[i]\n            });\n\n        // 使用Contract对象请求Logs，因为不想写topics的填充算法\n        const contract = new web3.eth.Contract([props.abi], props.contractAddress);\n        contract.getPastEvents(props.abi.name!, {\n            filter: filter,\n            fromBlock: values.fromBlock,\n            toBlock: values.toBlock\n        }).then((logs) => {\n            setLogsData(logs);\n            setWaitingResponse(false);\n        }).catch(reason => {\n            setWaitingResponse(false);\n        })\n    }\n\n    return (\n        <div style={props.style} className={props.className}>\n            <Card title=\"Filter\" style={{\n                width: \"100%\",\n                padding: \"0px\",\n                margin: \"0px\",\n                marginTop: \"20px\",\n            }}>\n                <Form\n                    form={form}\n                    layout=\"vertical\"\n                    onFinish={doFetchLogs}\n                >\n                    {\n                        CreationInputElement(\n                            {\n                                name: 'fromBlock',\n                                type: 'string',\n                            },\n                            `fromBlock`,\n                            `起始查询区块高度 $number`\n                        )\n                    }\n                    {\n                        CreationInputElement(\n                            {\n                                name: 'toBlock',\n                                type: 'string',\n                            },\n                            `toBlock`,\n                            `结束查询区块高度 $number`\n                        )\n                    }\n                    {\n                        props.abi.inputs === undefined || props.abi.inputs?.length <= 0\n                            ? null\n                            : props.abi.inputs?.filter((input) => input.indexed).map((arg, index) =>\n                                CreationInputElement(\n                                    arg,\n                                    `${index}`,\n                                    props.devdoc\n                                        && props.devdoc.params\n                                        && props.devdoc.params[arg.name]\n                                        ? props.devdoc.params[arg.name]\n                                        : undefined\n                                )\n                            )\n                    }\n                    <Form.Item>\n                        <Button\n                            type=\"primary\"\n                            size=\"large\"\n                            htmlType=\"submit\"\n                            loading={waitingResponse}\n                            style={{\n                                width: \"100%\",\n                            }}\n                        >\n                            {waitingResponse ? 'Fetching' : 'Fetch'}\n                        </Button>\n                    </Form.Item>\n                    {\n                        <LogsDisplay\n                            web3={props.web3}\n                            abi={props.abi}\n                            data={logsData}\n                            devdoc={props.devdoc}\n                        />\n                    }\n                </Form>\n            </Card>\n        </div>\n    )\n}","/*\n * @Author: your name\n * @Date: 2021-08-21 18:41:30\n * @LastEditTime: 2021-08-21 19:17:07\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: /learn-react/src/components/source_code/index.tsx\n */\n\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { coy as codeStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport solidity from 'react-syntax-highlighter/dist/esm/languages/prism/solidity'\n\nSyntaxHighlighter.registerLanguage('solidity', solidity);\n\nexport function SourceCodeCard(props: {\n    sourceCode: string,\n}) {\n    return (\n        <SyntaxHighlighter language=\"solidity\" style={codeStyle}>\n            {props.sourceCode}\n        </SyntaxHighlighter>\n    );\n}","import Web3 from \"web3\";\nimport \"antd/dist/antd.css\";\nimport { Card, Layout, PageHeader } from 'antd';\nimport * as utils from \"../../../utils\"\nimport { AbiItem } from 'web3-utils';\nimport { ABIEventCallerView, ABIFunctionCallerView, CompiledContract, SourceCodeCard } from \"../../../components\"\n\nimport './index.scss';\n\nexport function FunctionContent(props: {\n    contract: CompiledContract,\n    abi: AbiItem,\n    networkID: number\n}) {\n    const { contract, abi, networkID } = props\n\n    const web3 = new Web3((window as any).ethereum);\n\n    const deployedAddress = contract.networks !== undefined ? contract.networks[networkID]?.address : undefined;\n\n    const fname = utils.functionFormatStringFromABI(abi)\n\n    const devdoc = contract.devdoc && contract.devdoc.methods && contract.devdoc.methods[fname] ? contract.devdoc.methods[fname] : undefined\n    const userdoc = contract.userdoc && contract.userdoc.methods && contract.userdoc.methods[fname] ? contract.userdoc.methods[fname] : undefined\n    const eventDoc = contract.devdoc && contract.devdoc.events && contract.devdoc.events[fname] ? contract.devdoc.events[fname] : undefined\n\n    function parsedTitle() {\n        if (contract.userdoc !== undefined\n            && contract.userdoc.methods !== undefined\n            && contract.userdoc.methods[fname] !== undefined\n            && contract.userdoc.methods[fname].notice !== undefined\n        ) {\n            return contract.userdoc.methods[fname].notice;\n        } else {\n            return ''\n        }\n    }\n\n    function Details() {\n        if (contract.devdoc !== undefined\n            && contract.devdoc.methods !== undefined\n            && contract.devdoc.methods[fname] !== undefined\n            && contract.devdoc.methods[fname].details !== undefined\n        ) {\n            return <Card title=\"描述\" className=\"marginCard\">{contract.devdoc.methods[fname].details}</Card>\n        } else {\n            return null\n        }\n    }\n\n    return (\n        <Layout.Content title={abi.name} style={{\n            minHeight: '100%',\n            background: 'white',\n            borderLeftColor: '#EAEAEA',\n            borderLeftWidth: '1px',\n            borderLeftStyle: 'solid'\n        }}>\n            <PageHeader\n                ghost={false}\n                title={abi.name}\n                onBack={() => { }}\n                subTitle={parsedTitle()}\n            // extra={[\n            //     <Button key=\"3\">Operation</Button>,\n            //     <Button key=\"2\">Operation</Button>,\n            //     <Button key=\"1\" type=\"primary\">\n            //         Primary\n            //     </Button>,\n            // ]}\n            />\n            <Details />\n            <Card title=\"原型\" className=\"marginCard\">\n                <SourceCodeCard sourceCode={utils.functionSourceCodeFormatFromABI(abi)} />\n            </Card>\n            {\n                abi.type === 'function'\n                    ? <ABIFunctionCallerView\n                        className=\"marginCard\"\n                        style={{\n                            // marginBottom: '50px'\n                            paddingBottom: '50px'\n                        }}\n                        abi={abi}\n                        web3={web3}\n                        contractAddress={deployedAddress}\n                        devdoc={devdoc}\n                        userdoc={userdoc}\n                    />\n                    : null\n            }\n            {\n                abi.type === 'event'\n                    ? <ABIEventCallerView\n                        className=\"marginCard\"\n                        style={{\n                            // marginBottom: '50px'\n                            paddingBottom: '50px'\n                        }}\n                        abi={abi}\n                        web3={web3}\n                        contractAddress={deployedAddress}\n                        devdoc={eventDoc}\n                        userdoc={userdoc}\n                    />\n                    : null\n            }\n        </Layout.Content >\n    )\n}","import \"antd/dist/antd.css\";\nimport { Card, Layout, PageHeader, Table, Badge } from 'antd';\nimport { CompiledContract, SourceCodeCard } from '../../../components';\nimport { Descriptions } from 'antd';\nimport moment from \"moment\";\n\nfunction NetWorkTable(params: {\n    networks: Object[],\n    networkID: number,\n}) {\n    const { networks, networkID } = params;\n\n    const dataSource = [];\n\n    for (var a in networks) {\n        dataSource.push({\n            connected: parseInt(a) === networkID,\n            networkid: a,\n            contractAddress: (networks[a] as any).address\n        })\n    }\n\n    return (\n        <Card\n            bodyStyle={{ padding: 0 }}\n            style={{\n                marginTop: '20px',\n                marginLeft: '20px',\n                marginRight: '20px',\n                padding: 0,\n            }}\n        >\n            <Table\n                columns={[\n                    {\n                        title: 'NetWork',\n                        dataIndex: 'networkid',\n                        key: 'networkid',\n                        render: (text: string, row) =>\n                            <span>\n                                {\n                                    row.connected ? <Badge status=\"success\" /> : null\n                                }\n                                {\n                                    text\n                                }\n                            </span>\n                    },\n                    {\n                        title: 'Address',\n                        dataIndex: 'contractAddress',\n                        key: 'contractAddress',\n                        render: (text: string) => <span>{text}</span>\n                    },\n                ]}\n                pagination={false}\n                dataSource={dataSource}\n            >\n            </Table>\n        </Card>\n    )\n}\n\n\nexport function ContractSetting(params: {\n    contract: CompiledContract,\n    networkID: number,\n}) {\n    const { contract, networkID } = params;\n\n    return (\n        <Layout.Content style={{\n            minHeight: '100%',\n            background: 'white',\n            borderLeftColor: '#EAEAEA',\n            borderLeftWidth: '1px',\n            borderLeftStyle: 'solid'\n        }}>\n            <PageHeader\n                ghost={false}\n                title={contract.contractName}\n                onBack={() => { }}\n            />\n            <Descriptions\n                title=\"Infomations\"\n                bordered\n                style={{\n                    marginLeft: '20px',\n                    marginRight: '20px',\n                }}\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Descriptions.Item label=\"Name\">{contract.contractName}</Descriptions.Item>\n                <Descriptions.Item label=\"Compiler\">\n                    {\n                        contract.compiler?.name === undefined ? \"None\" : contract.compiler?.name\n                    }\n                </Descriptions.Item>\n                <Descriptions.Item label=\"CompilerVersion\">\n                    {\n                        contract.compiler?.version === undefined ? \"None\" : contract.compiler?.version\n                    }\n                </Descriptions.Item>\n                <Descriptions.Item label=\"UpdateTime\">\n                    {\n                        contract.compiler?.version === undefined ? \"None\" : moment(contract.updatedAt).format('YYYY-MM-DD HH:mm:ss')\n                    }\n                </Descriptions.Item>\n            </Descriptions>\n            <NetWorkTable networks={contract.networks} networkID={networkID} />\n            {\n                contract.source !== undefined\n                    ?\n                    <Card style={{\n                        marginLeft: '20px',\n                        marginRight: '20px',\n                    }}>\n                        <SourceCodeCard sourceCode={contract.source} />\n                    </Card>\n                    : null\n            }\n        </Layout.Content>\n    )\n}","import \"antd/dist/antd.css\";\nimport Dragger from \"antd/lib/upload/Dragger\";\nimport './index.scss';\nimport {\n    UploadOutlined\n} from '@ant-design/icons';\nimport { CompiledContract } from \"../../components\";\n\nexport function ContractImport(params: {\n    onDropFile: (e: any) => void,\n    onCheckedCompiledContract: (contract: CompiledContract) => void,\n}) {\n    const { onDropFile } = params;\n    return (\n        <Dragger\n            className=\"dragger\"\n            itemRender={() => {\n                return null\n            }}\n            openFileDialogOnClick={false}\n            onDrop={onDropFile}\n            directory\n        >\n            <p className=\"ant-upload-drag-icon\"><UploadOutlined /></p>\n            <p className=\"ant-upload-text\">拖动文件至本区域</p>\n        </Dragger >\n    )\n}","import Web3 from \"web3\";\nimport { useState } from 'react';\nimport { Layout, Menu, Button } from 'antd';\nimport { MenuClickEventHandler } from 'rc-menu/lib/interface';\n\nimport {\n    ProfileFilled,\n    AreaChartOutlined,\n    BarChartOutlined,\n    HomeOutlined,\n    UploadOutlined,\n    SettingFilled,\n    UngroupOutlined\n} from '@ant-design/icons';\n\nimport * as utils from '../../../utils'\nimport { CompiledContract } from '../../../components'\n\nimport './index.scss'\nimport { TransferGroup } from \"../../../components/structs/TransferGroup\";\n\nfunction ContractMenu(props: {\n    contracts: CompiledContract[],\n    transferGroups: TransferGroup[],\n    onSelected: MenuClickEventHandler,\n    onDropFile: (e: any) => void,\n}) {\n    const web3 = new Web3((window as any).ethereum);\n\n    const [ownerAddress, setOwnerAddress] = useState<string | undefined>(\"\");\n\n    try {\n        (web3.currentProvider as any).sendAsync({\n            method: \"eth_requestAccounts\"\n        }, (error: Error, response: any) => {\n            if (error == null) {\n                setOwnerAddress(response.result[0]);\n                return;\n            }\n        })\n    } catch (e) {\n        setOwnerAddress(undefined)\n    }\n\n    function MenuHeader() {\n        return (\n            <Button\n                style={{\n                    width: '100%',\n                    height: '50px',\n                }}\n                size=\"middle\"\n                type=\"primary\"\n                icon={<HomeOutlined />}\n                danger={ownerAddress !== undefined && ownerAddress.length <= 0}\n            >\n            </Button>\n        )\n    }\n\n    return (\n        <Layout.Sider\n            width='20vw'\n            theme=\"light\"\n            style={{\n                overflow: 'auto',\n                height: '100vh',\n                position: 'fixed',\n                left: 0,\n            }}\n            breakpoint='md'>\n            {/* <MenuHeader /> */}\n            <Menu\n                mode=\"inline\"\n                theme=\"light\"\n                style={{ height: '100%', borderRight: 1 }}\n            >\n                {\n                    props.contracts.map((contractObject, contractIndex) => {\n                        return (\n                            <Menu.SubMenu\n                                key={contractObject.contractName}\n                                icon={<ProfileFilled />}\n                                title={contractObject.contractName}>\n                                <Menu.Item\n                                    key={`${contractObject.contractName}-setting`}\n                                    onClick={props.onSelected}\n                                    icon={<SettingFilled />}\n                                >\n                                    合约信息\n                                </Menu.Item>\n                                <Menu.SubMenu\n                                    key={`${contractObject.contractName}-function`}\n                                    title=\"函数调用\"\n                                    icon={<AreaChartOutlined />}\n                                >\n                                    {\n                                        contractObject.abi.filter((abiFun) => {\n                                            return abiFun.type === 'function'\n                                        }).map((abi, index) => {\n                                            const funSignFormat = utils.functionFormatStringFromABI(abi);\n                                            return (\n                                                <Menu.Item\n                                                    key={web3.eth.abi.encodeFunctionSignature(abi)}\n                                                    onClick={props.onSelected}\n                                                >\n                                                    {\n                                                        contractObject.userdoc !== undefined && contractObject.userdoc.methods[funSignFormat] !== undefined\n                                                            ? contractObject.userdoc.methods[funSignFormat].notice\n                                                            : abi.name\n                                                    }\n                                                </Menu.Item>\n                                            )\n                                        })\n                                    }\n                                </Menu.SubMenu>\n                                <Menu.SubMenu\n                                    key={`${contractObject.contractName}-event`}\n                                    title=\"事件查询\"\n                                    icon={<BarChartOutlined />}\n                                >\n                                    {\n                                        contractObject.abi.filter((abiFun) => {\n                                            return abiFun.type === 'event'\n                                        }).map((abi, index) => {\n                                            return (\n                                                <Menu.Item\n                                                    // key={`${contractObject.contractName}-event-${index}`}\n                                                    key={web3.eth.abi.encodeFunctionSignature(abi)}\n                                                    onClick={props.onSelected}>\n                                                    {\n                                                        abi.name\n                                                    }\n                                                </Menu.Item>\n                                            )\n                                        })\n                                    }\n                                </Menu.SubMenu>\n                            </Menu.SubMenu>\n                        )\n                    })\n                }\n                {\n                    props.transferGroups.map((groupObject, groupIndex) => {\n                        return (\n                            <Menu.Item\n                                key={`trasnfer-groups-${groupIndex}`}\n                                icon={<UngroupOutlined />}\n                                onClick={props.onSelected}\n                            >\n                                {groupObject.name}\n                            </Menu.Item>\n                        )\n                    })\n                }\n                {\n                    <Menu.Item\n                        key='upload'\n                        icon={<UploadOutlined />}\n                        onClick={props.onSelected}\n                    >\n                        Upload\n                    </Menu.Item>\n                }\n\n            </Menu>\n        </Layout.Sider>\n    );\n}\n\nexport default ContractMenu;","import \"antd/dist/antd.css\";\n\nimport Web3 from \"web3\";\nimport HDWalletProvider from \"@truffle/hdwallet-provider\";\n\nimport { Button, Select, Form, Input, Card } from 'antd';\n\nimport { useState } from \"react\";\n\nconst { Option } = Select;\n\nexport type TokenTypes = 'BNB' | 'ERC20' | 'ERC1363';\n\nexport interface TokenInfo {\n    name?: string,\n    symbol?: string,\n    decimals?: number,\n    tokenAddress: string,\n}\n\nexport interface TransferConfig {\n    hdweb3: Web3,\n    hdprovider: HDWalletProvider,\n    rpcurl: string,\n    tokenType: TokenTypes,\n    tokenInfo: TokenInfo\n}\n\nexport function ConfigInputer(params: {\n    onVerifiedConfig: (config: TransferConfig) => void\n}) {\n    const { onVerifiedConfig } = params;\n    const [form] = Form.useForm();\n    const [isCustomRPC, setIsCustomRPC] = useState<boolean>(false);\n    const [tokenType, setTokenType] = useState<TokenTypes>(\"BNB\");\n    const [inLoading, setInLoading] = useState<boolean>(false);\n\n    const bscChainRPCS = [\n        \"http://localhost:8546\",\n        \"https://bsc-dataseed.binance.org\",\n        \"https://bsc-dataseed1.defibit.io\",\n        \"https://bsc-dataseed1.ninicoin.io\",\n        \"https://bsc.nodereal.io\"\n    ];\n\n    const tokenTypes = [\n        \"BNB\",\n        \"ERC20\",\n        \"ERC1363\"\n    ];\n\n    // BSC节点选择\n    const onBSCHttpRPCChange = (value: string) => {\n        if (value === \"custom_rpc\") {\n            setIsCustomRPC(true)\n            form.setFieldsValue({\n                \"rpcurl\": \"\"\n            })\n        } else {\n            form.setFieldsValue({\n                \"rpcurl\": value\n            })\n        }\n    };\n\n    const checkConfig = async (fromValues: any) => {\n        try {\n            let provider = new HDWalletProvider({\n                privateKeys: [fromValues.private_key],\n                providerOrUrl: fromValues.rpcurl\n            });\n\n            let hdWeb3 = new Web3(provider);\n            return {\n                hdweb3: hdWeb3,\n                hdprovider: provider,\n                tokenType: fromValues.token_type,\n                rpcurl: fromValues.rpcurl,\n                tokenInfo: {\n                    tokenAddress: fromValues.token_address\n                }\n            } as TransferConfig\n        } catch (e) {\n            return undefined;\n        }\n    };\n\n    return (\n        <Card title=\"基本配置\" className=\"marginCard\">\n            <Form\n                form={form}\n                layout=\"vertical\"\n                onFinish={async (values) => {\n                    setInLoading(true)\n\n                    await checkConfig(values).then((config?: TransferConfig) => {\n                        if (onVerifiedConfig && config !== undefined) {\n                            onVerifiedConfig(config!)\n                        }\n                    })\n\n                    setInLoading(false)\n                }}\n            >\n                <Form.Item\n                    label=\"交易节点\"\n                    name=\"rpcurl\"\n                    rules={[{ required: true }]}\n                >\n                    {\n                        !isCustomRPC ?\n                            <Select\n                                placeholder=\"Select a option and change input text above\"\n                                onChange={onBSCHttpRPCChange}\n                                allowClear\n                            >\n                                {\n                                    bscChainRPCS.map(url => {\n                                        return <Option value={url}>{url}</Option>\n                                    })\n                                }\n                                <Option value=\"custom_rpc\">自定义节点</Option>\n                            </Select>\n                            :\n                            <Input placeholder=\"http://localhost:8545\" defaultValue={\"http://localhost:8545\"} />\n                    }\n                </Form.Item>\n                <Form.Item\n                    label=\"代币协议类型\"\n                    name=\"token_type\"\n                    rules={[{ required: true, message: '请选择代币类型' }]}\n                >\n                    <Select\n                        placeholder=\"Select a option and change input text above\"\n                        onChange={(v) => {\n                            if (v) { setTokenType(v.toString() as TokenTypes) }\n                        }}\n                    >\n                        {\n                            tokenTypes.map(tname => {\n                                return <Option value={tname}>{tname}</Option>\n                            })\n                        }\n                    </Select>\n                </Form.Item>\n                {\n                    tokenType !== \"BNB\"\n                        ? <Form.Item label=\"代币合约地址\" name=\"token_address\"><Input /></Form.Item>\n                        : undefined\n                }\n                <Form.Item\n                    label=\"交易私钥\"\n                    name=\"private_key\"\n                    rules={[{ required: true, message: '请在此处粘贴私钥' }]}\n                >\n                    <Input.Password />\n                </Form.Item>\n                <Form.Item>\n                    <div style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\"\n                    }}>\n                        <Button\n                            type=\"primary\"\n                            size=\"large\"\n                            htmlType=\"submit\"\n                            style={{\n                                width: \"100%\",\n                            }}\n                            loading={inLoading}\n                        >\n                            {inLoading ? \"正在验证配置\" : \"下一步\"}\n                        </Button>\n                    </div>\n                </Form.Item>\n            </Form>\n        </Card>\n    )\n}","import \"antd/dist/antd.css\";\nimport BN from 'bn.js';\nimport { Descriptions } from 'antd';\n\nimport { useEffect, useState } from \"react\";\nimport { TransferConfig } from \"./config\";\n\nconst ERC20ABI = require('../../../assets/contract-templates/build/contracts/ERC20.json').abi;\n\ninterface AccountInfo {\n    address: string,\n    balance: BN\n}\n\nexport function InfomationDisplayer(params: {\n    config: TransferConfig\n}) {\n    const { config } = params;\n    const { hdweb3, hdprovider } = config;\n    const [accountInfo, setAccountInfo] = useState<AccountInfo>();\n    const [nodeBlockNumber, setNodeBlockNumber] = useState<number>(0);\n    const [tokenBalance, setTokenBalance] = useState<string>(\"Loading...\");\n\n    let contract = new hdweb3.eth.Contract(ERC20ABI, config.tokenInfo!.tokenAddress);\n    if (config.tokenType !== \"BNB\") {\n        Promise.all([\n            contract.methods.name().call(),\n            contract.methods.symbol().call(),\n            contract.methods.decimals().call(),\n        ]).then(([name, symbol, decimals]) => {\n            config.tokenInfo!.name = name;\n            config.tokenInfo!.symbol = symbol;\n            config.tokenInfo!.decimals = decimals;\n        })\n    }\n\n    useEffect(() => {\n        const fetchInfo = () => {\n            hdweb3.eth.getBlockNumber().then(setNodeBlockNumber)\n            hdweb3.eth.getBalance(hdprovider.getAddress())\n                .then((balance) => {\n                    setAccountInfo({\n                        address: hdprovider.getAddress(),\n                        balance: hdweb3.utils.toBN(balance)\n                    })\n                })\n\n            if (config.tokenType !== \"BNB\" && contract) {\n                contract.methods.balanceOf(hdprovider.getAddress())\n                    .call()\n                    .then((balance: string) => {\n                        let balanceBN = hdweb3.utils.toBN(balance);\n                        balanceBN = balanceBN.div(\n                            hdweb3.utils.toBN(10).pow(hdweb3.utils.toBN(config.tokenInfo.decimals! - 4))\n                        )\n                        let balanceFloat = parseFloat(balanceBN.toString()) / 1e4\n                        setTokenBalance(balanceFloat.toString())\n                    })\n            }\n        }\n\n        fetchInfo()\n        const timer = setInterval(fetchInfo, 5000)\n        return () => clearInterval(timer)\n    }, [])\n\n    return (\n        <>\n            <Descriptions\n                bordered\n                style={{\n                    marginLeft: '20px',\n                    marginRight: '20px',\n                }}\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                {/* 账户信息 */}\n                <Descriptions.Item label=\"协议类型\">{config.tokenType}</Descriptions.Item>\n                {accountInfo ? <Descriptions.Item label=\"出账地址\" span={2}>{accountInfo!.address}</Descriptions.Item> : undefined}\n                {accountInfo ? <Descriptions.Item label=\"BNB余额\">{parseFloat(hdweb3.utils.fromWei(accountInfo!.balance)).toFixed(8)}</Descriptions.Item> : undefined}\n                {/* 节点信息 */}\n                <Descriptions.Item label=\"交易节点\" span={2}>{config.rpcurl}</Descriptions.Item>\n                <Descriptions.Item label=\"区块高度\">{nodeBlockNumber}</Descriptions.Item>\n            </Descriptions>\n            {\n                config.tokenType !== \"BNB\"\n                    ?\n                    <Descriptions\n                        bordered\n                        style={{\n                            marginTop: '20px',\n                            marginLeft: '20px',\n                            marginRight: '20px',\n                        }}\n                        column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                    >\n                        <Descriptions.Item label=\"代币名称\">{config.tokenInfo.name}</Descriptions.Item>\n                        <Descriptions.Item label=\"代币符号\">{config.tokenInfo.symbol}</Descriptions.Item>\n                        <Descriptions.Item label=\"精度\">{config.tokenInfo.decimals}</Descriptions.Item>\n                        <Descriptions.Item label=\"合约地址\" span={2}>{config.tokenInfo!.tokenAddress}</Descriptions.Item>\n                        <Descriptions.Item label=\"出账地址余额\" span={2}>{tokenBalance}</Descriptions.Item>\n                    </Descriptions>\n                    : undefined\n            }\n        </>\n\n    )\n}","import \"antd/dist/antd.css\";\n\nimport type { ColumnsType } from 'antd/lib/table';\nimport { Button, PageHeader, Table, Tag, Space, Descriptions, Select } from 'antd';\nimport { TransferGroup, TransferInfo } from \"../../../components/structs/TransferGroup\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { TransferConfig } from \"./config\";\nimport BN from 'bn.js';\nimport {\n    CaretRightOutlined,\n    StopOutlined,\n    BugOutlined\n} from '@ant-design/icons';\n\nconst { Option } = Select;\nconst ERC20ABI = require('../../../assets/contract-templates/build/contracts/ERC20.json').abi;\n\ntype TxState = \"Ready\" | \"Pending\" | \"Queue\" | \"Confirmation\" | \"Success\" | \"Error\";\ntype TaskState = \"Start\" | \"Stop\" | \"Running\" | \"Stoping\" | \"HasNext\" | \"RetryError\";\n\ninterface DataType extends TransferInfo {\n    state?: TxState\n    error?: string\n}\n\nexport function TransferTable(params: {\n    transferConfig?: TransferConfig,\n    group: TransferGroup,\n}) {\n    const { group, transferConfig } = params;\n    const [gasPrice, setGasPrice] = useState<number>(6)\n    const [groupSize, setGroupSize] = useState<number>(30)\n    const [taskState, setTaskState] = useState<TaskState>()\n    const [needStoping, setNeedStoping] = useState<boolean>(false);\n    const [dataSource, setDataSource] = useState<DataType[]>(\n        group.datas.map(info => {\n            return {\n                ...info,\n                state: \"Ready\",\n                selected: true\n            } as DataType\n        })\n    )\n    const columns: ColumnsType<DataType> = [\n        { title: '接收地址', dataIndex: 'address', key: 'address', },\n        { title: '数量', dataIndex: 'amount', key: 'amount', },\n        {\n            title: '交易状态', dataIndex: 'state', key: 'state',\n            render: (_, { state, error }) => {\n                let color;\n                switch (state) {\n                    case \"Pending\": color = \"geekblue\"; break;\n                    case \"Queue\": color = \"processing\"; break;\n                    case \"Success\": color = \"success\"; break;\n                    case \"Error\": color = \"red\"; break;\n                    case \"Ready\": color = \"default\"; break;\n                    default: color = \"red\";\n                }\n                return (state ? <Tag color={color}>{state === \"Error\" ? error : state}</Tag> : undefined)\n            }\n        },\n        { title: 'Hash', dataIndex: 'txHash', key: 'txHash' },\n    ]\n\n    useEffect(() => {\n        if (taskState === \"RetryError\") {\n            dataSource.forEach(row => {\n                if (row.state === \"Error\") {\n                    row.state = \"Queue\"\n                }\n            })\n            setTaskState(\"Running\")\n            setNeedStoping(false)\n        }\n        else if (taskState === \"Start\") {\n            dataSource.forEach(row => {\n                if (row.state === \"Ready\") {\n                    row.state = \"Queue\"\n                }\n            })\n            setTaskState(\"Running\")\n            setNeedStoping(false)\n        } else if (taskState === \"Running\") {\n            if (transferConfig?.tokenType === \"BNB\") {\n                doTransferGroupBNB(groupSize).then((hasPending: boolean) => {\n                    if (hasPending) {\n                        setTaskState(\"HasNext\")\n                    } else {\n                        setTaskState(\"Stop\")\n                    }\n                })\n            } else {\n                doTransferGroupToken(groupSize).then((hasPending: boolean) => {\n                    if (hasPending) {\n                        setTaskState(\"HasNext\")\n                    } else {\n                        setTaskState(\"Stop\")\n                    }\n                })\n            }\n        }\n        else if (taskState === \"HasNext\") {\n            setTaskState(needStoping ? \"Stop\" : \"Running\")\n        }\n        else if (taskState === \"Stoping\") {\n            setNeedStoping(true)\n        }\n        else if (taskState === \"Stop\") {\n            dataSource.forEach(row => {\n                if (row.state === \"Queue\") {\n                    row.state = \"Ready\"\n                }\n            })\n            setDataSource(dataSource.slice())\n        }\n    }, [taskState])\n\n    let totalSentAmount = useMemo(() => {\n        if (!transferConfig) {\n            return new BN(0);\n        }\n        let sentAmount = 0;\n        dataSource.forEach(row => {\n            sentAmount += row.amount;\n        })\n        return sentAmount.toFixed(6);\n    }, [dataSource, transferConfig])\n\n    const sleep = (ms: number) => new Promise<void>((resolve, reject) => {\n        setTimeout(() => {\n            resolve()\n        }, ms);\n    })\n\n    const doTransferGroupBNB = async (maxLimit: number) => {\n        if (transferConfig!.tokenType !== \"BNB\") {\n            return false;\n        }\n\n        let web3 = transferConfig!.hdweb3;\n        let provider = transferConfig!.hdprovider;\n        let accountNonce = await web3.eth.getTransactionCount(provider.getAddress());\n        let balance = web3.utils.toBN(await web3.eth.getBalance(provider.getAddress()));\n        let pendingTxPromise = [];\n\n        for (let i = 0; i < dataSource.length && pendingTxPromise.length < maxLimit; i++) {\n            if (dataSource[i].state === \"Queue\") {\n                let sentAmount = web3.utils.toBN(web3.utils.toWei(dataSource[i].amount.toString()));\n                let fee = web3.utils.toBN(gasPrice).muln(21000)\n                if (sentAmount.add(fee).gt(balance)) {\n                    dataSource[i].state = \"Error\"\n                    dataSource[i].error = \"Insufficient Balance\"\n                    setDataSource(dataSource.slice())\n                    setTaskState(\"Stoping\")\n                    break;\n                }\n                balance = balance.sub(sentAmount.add(fee))\n                pendingTxPromise.push(\n                    web3.eth.sendTransaction({\n                        from: provider.getAddress(),\n                        to: dataSource[i].address,\n                        value: web3.utils.toWei(dataSource[i].amount.toString()),\n                        nonce: accountNonce++\n                    }).once(\"error\", function (error) {\n                        dataSource[i].state = \"Error\"\n                        dataSource[i].error = \"Error\"\n                        setDataSource(dataSource.slice())\n                    }).once(\"transactionHash\", function (txHash) {\n                        dataSource[i].txHash = txHash\n                        dataSource[i].state = \"Pending\"\n                        setDataSource(dataSource.slice())\n                    }).once(\"receipt\", function (receipt) {\n                        dataSource[i].state = \"Success\"\n                        setDataSource(dataSource.slice())\n                    })\n                )\n                await sleep(100)\n            }\n        }\n\n        await Promise.all(pendingTxPromise);\n        return dataSource.filter(row => row.state === \"Queue\").length > 0\n    }\n\n    const doTransferGroupToken = async (maxLimit: number) => {\n        let web3 = transferConfig!.hdweb3;\n        let provider = transferConfig!.hdprovider;\n        let accountNonce = await web3.eth.getTransactionCount(provider.getAddress());\n        let tokenContract = new web3.eth.Contract(ERC20ABI, transferConfig!.tokenInfo!.tokenAddress);\n        let pendingTxPromise = [];\n\n        let balanceToken = web3.utils.toBN(await web3.eth.getBalance(provider.getAddress()));\n        let balanceBNB = web3.utils.toBN(await web3.eth.getBalance(provider.getAddress()));\n        let feeBNBMin = web3.utils.toBN(web3.utils.toWei(\"0.01\"));\n\n        if (balanceBNB.lt(feeBNBMin)) {\n            setTaskState(\"Stoping\");\n            return false;\n        }\n\n        for (let i = 0; i < dataSource.length && pendingTxPromise.length < maxLimit; i++) {\n            if (dataSource[i].state === \"Queue\") {\n                let decimals = transferConfig!.tokenInfo!.decimals!;\n                let decimalsPowSub4 = web3.utils.toBN(10).pow(web3.utils.toBN(decimals - 4))\n                let sentAmount = web3.utils.toBN(Math.floor(dataSource[i].amount * 10000)).mul(decimalsPowSub4)\n\n                if (balanceToken.lt(sentAmount)) {\n                    dataSource[i].state = \"Error\"\n                    dataSource[i].error = \"Insufficient Balance\"\n                    setDataSource(dataSource.slice())\n                    setTaskState(\"Stoping\")\n                    break;\n                }\n                balanceToken = balanceToken.sub(sentAmount)\n                let txSender = tokenContract!.methods.transfer(\n                    dataSource[i].address,\n                    sentAmount\n                );\n\n                pendingTxPromise.push(\n                    txSender.send({\n                        from: provider.getAddress(),\n                        nonce: accountNonce++\n                    }).once(\"transactionHash\", (txHash: any) => {\n                        dataSource[i].txHash = txHash\n                        dataSource[i].state = \"Pending\"\n                        setDataSource(dataSource.slice())\n                    }).then(() => {\n                        dataSource[i].state = \"Success\"\n                        setDataSource(dataSource.slice())\n                    }).catch((e: any) => {\n                        dataSource[i].state = \"Error\"\n                        setDataSource(dataSource.slice())\n                    })\n                )\n                await sleep(100)\n            }\n        }\n\n        await Promise.all(pendingTxPromise);\n        return dataSource.filter(row => row.state === \"Queue\").length > 0\n    }\n\n    return (\n        <>\n            <PageHeader ghost={true} title={`转出列表`} />\n            <Descriptions\n                bordered\n                style={{\n                    marginLeft: '20px',\n                    marginRight: '20px',\n                    marginBottom: '20px'\n                }}\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Descriptions.Item label=\"每批发送交易数量\" span={1}>\n                    <Select\n                        style={{\n                            \"height\": \"100%\",\n                            \"width\": \"100%\",\n                        }}\n                        disabled={taskState === \"Running\"}\n                        defaultValue={\"30\"}\n                        onChange={(v) => {\n                            setGroupSize(parseInt(v?.toString()))\n                        }}>\n                        <Option value=\"1\">1</Option>\n                        <Option value=\"5\">5</Option>\n                        <Option value=\"30\">30</Option>\n                        <Option value=\"40\">40</Option>\n                        <Option value=\"50\">50</Option>\n                    </Select>\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Gas Price\" span={1}>\n                    <Select\n                        style={{\n                            \"height\": \"100%\",\n                            \"width\": \"100%\",\n                        }}\n                        disabled={taskState === \"Running\"}\n                        defaultValue=\"6\"\n                        onChange={(v) => {\n                            setGasPrice(parseFloat(v?.toString()))\n                        }}>\n                        <Option value=\"5\">5 Gwei</Option>\n                        <Option value=\"6\">6 Gwei</Option>\n                        <Option value=\"7\">7 Gwei</Option>\n                        <Option value=\"8\">8 Gwei</Option>\n                    </Select>\n                </Descriptions.Item>\n                <Descriptions.Item label={`转出数量-${transferConfig?.tokenType === \"BNB\" ? \"BNB\" : transferConfig!.tokenInfo.symbol}`} span={1}>\n                    {totalSentAmount}\n                </Descriptions.Item>\n            </Descriptions>\n            <Space style={{\n                width: '100%',\n                marginLeft: '20px',\n                marginRight: '20px',\n                marginBottom: '20px',\n            }}>\n                <Button\n                    type=\"primary\"\n                    icon={<CaretRightOutlined />}\n                    loading={taskState === \"Running\"}\n                    disabled={\n                        (\n                            taskState &&\n                            taskState !== \"Stop\"\n                        ) ||\n                        dataSource.filter(row => row.state !== \"Success\").length === 0\n                    }\n                    onClick={async () => {\n                        setTaskState(\"Start\");\n                    }}\n                >\n                    {\n                        taskState === \"Running\"\n                            ? `正在执行 ${dataSource.filter(row => row.state === \"Success\").length}/${dataSource.length}`\n                            : taskState\n                                ? `继续 ${dataSource.filter(row => row.state === \"Success\").length}/${dataSource.length}`\n                                : \"开始\"\n                    }\n                </Button>\n                <Button\n                    danger\n                    type=\"primary\"\n                    icon={<StopOutlined />}\n                    loading={taskState === \"Stoping\"}\n                    disabled={taskState !== \"Running\"}\n                    onClick={() => {\n                        setTaskState(\"Stoping\")\n                    }}\n                >\n                    {taskState === \"Stoping\" ? \"正在停止任务\" : \"停止\"}\n                </Button>\n                {\n                    dataSource.filter(row => row.state === \"Error\").length > 0 && taskState === \"Stop\"\n                        ?\n                        <Button\n                            danger\n                            type=\"primary\"\n                            icon={<BugOutlined />}\n                            onClick={() => {\n                                dataSource.forEach(row => {\n                                    if (row.state === \"Error\") {\n                                        row.state = \"Ready\"\n                                    }\n                                })\n                                setDataSource(dataSource.slice())\n                            }}\n                        >\n                            重置错误交易\n                        </Button>\n                        : undefined\n                }\n\n            </Space>\n            <Table\n                style={{\n                    marginLeft: '20px',\n                    marginRight: '20px',\n                }}\n                bordered\n                size={'middle'}\n                dataSource={dataSource}\n                columns={columns}\n                pagination={\n                    {\n                        // pageSize: groupSize === 1 ? 50 : groupSize * 2\n                        pageSize: 20\n                    }\n                }\n            />\n        </>\n\n    )\n}","import \"antd/dist/antd.css\";\n\nimport { Layout, PageHeader } from 'antd';\nimport { TransferGroup } from \"../../../components/structs/TransferGroup\";\n\nimport { useState } from \"react\";\nimport { ConfigInputer, TransferConfig } from \"./config\";\nimport { InfomationDisplayer } from \"./infomation\";\nimport { TransferTable } from \"./table\";\n\nexport function GroupTransfer(params: {\n    group: TransferGroup\n}) {\n    const { group } = params;\n    const [config, setConfig] = useState<TransferConfig>();\n\n    return (\n        <Layout.Content style={{\n            minHeight: '100%',\n            background: 'white',\n            borderLeftColor: '#EAEAEA',\n            borderLeftWidth: '1px',\n            borderLeftStyle: 'solid'\n        }}>\n            <PageHeader\n                ghost={false}\n                title={`批量转账任务 - ${group.name}`}\n            />\n            {\n                config\n                    ? <InfomationDisplayer config={config} />\n                    : <ConfigInputer onVerifiedConfig={(c) => { setConfig(c) }} />\n            }\n            {\n                config\n                    ? <TransferTable transferConfig={config} group={group} />\n                    : undefined\n            }\n\n        </Layout.Content>\n    )\n}","import Web3 from 'web3';\nimport 'antd/dist/antd.css';\nimport { useState } from 'react';\nimport { Layout, Result } from 'antd';\nimport { MenuInfo } from 'rc-menu/lib/interface';\nimport { FunctionContent } from './content';\nimport { ContractSetting } from \"./contract_setting\";\nimport { CompiledContract } from '../../components';\nimport { TransferGroup } from '../../components/structs/TransferGroup';\nimport { ContractImport } from \"../contract_importer\";\nimport ContractMenu from \"./contract_menu\";\nimport * as xlsx from 'xlsx';\n\nimport * as StateCreator from \"./states\";\nimport { GroupTransfer } from './group_transfer';\n\nfunction readContractAsync(file: any) {\n    return new Promise<CompiledContract>((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.readAsText(file);\n        reader.onload = () => {\n            // 去除不需要的字段\n            const longContract = JSON.parse(reader.result as string) as CompiledContract;\n            const shotContract = {\n                contractName: longContract.contractName,\n                abi: longContract.abi,\n                networks: longContract.networks,\n                userdoc: longContract.userdoc,\n                devdoc: longContract.devdoc,\n                source: (longContract as any).source,\n                updatedAt: (longContract as any).updatedAt,\n                compiler: (longContract as any).compiler,\n            }\n            return resolve(shotContract);\n        }\n    })\n}\n\nfunction readExeclAsync(file: any) {\n    return new Promise<TransferGroup>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            const workbook = xlsx.read(event.target!.result, { type: 'binary' });\n\n            let data: any[] = [];\n            for (const sheet in workbook.Sheets) {\n                if (workbook.Sheets.hasOwnProperty(sheet)) {\n                    data = data.concat(xlsx.utils.sheet_to_json(workbook.Sheets[sheet]));\n                }\n                break;\n            }\n\n            return resolve({\n                name: file.name as string,\n                datas: data.map(function (row) {\n                    return {\n                        address: row[Object.keys(row)[0]] as string,\n                        amount: row[Object.keys(row)[1]] as number\n                    }\n                })\n            })\n        }\n        reader.readAsBinaryString(file);\n    })\n}\n\nexport default function ContractLookupPage() {\n    const web3 = new Web3((window as any).ethereum);\n\n    const [transferGroups, setTransferGroups] = useState<TransferGroup[]>([]);\n    const [contracts, setContracts] = useState<CompiledContract[]>([]);\n    const [netWorkID, setNetWorkID] = useState<number>();\n    const [contentState, setContetState] = useState<StateCreator.ContentViewState>(StateCreator.UploadState());\n\n    web3.eth.net.getId().then((netID) => {\n        setNetWorkID(netID);\n    });\n\n    // 主菜单点击\n    function onMenuSelect(info: MenuInfo): void {\n\n        const paths = info.keyPath\n        if (paths.length <= 0) {\n            return;\n        }\n\n        // 打开了批量转账列表\n        if (paths[0].toLocaleLowerCase().startsWith('trasnfer-groups-')) {\n            let index = parseInt(paths[0].substring('trasnfer-groups-'.length));\n            setContetState(StateCreator.TransferState(transferGroups[index]));\n            return\n        }\n\n        switch (paths.length) {\n            case 1: {\n                switch (paths[0].toLowerCase()) {\n                    case 'upload': {\n                        setContetState(StateCreator.UploadState());\n                        break;\n                    }\n                }\n                break;\n            }\n\n            // 二级菜单点击\n            case 2: {\n                const contract = contracts.find((c) => c.contractName === paths[paths.length - 1]);\n                if (contract !== undefined) {\n                    if (paths.length === 2 && paths[0] === `${contract.contractName}-setting`) {\n                        setContetState(StateCreator.SettingState(contract))\n                    }\n                }\n                break;\n            }\n\n            // 三级菜单点击\n            case 3: {\n                const contract = contracts.find((c) => c.contractName === paths[paths.length - 1]);\n                if (contract !== undefined) {\n                    if (\n                        paths.length === 3 &&\n                        (\n                            paths[1] === `${contract.contractName}-function` ||\n                            paths[1] === `${contract.contractName}-event`\n                        )\n                    ) {\n                        const abi = contract.abi?.find((a) => (a.type === 'function' || a.type === 'event') && web3.eth.abi.encodeFunctionSignature(a) === paths[0])\n                        if (abi !== undefined) {\n                            setContetState(StateCreator.ABIState(\n                                contract,\n                                abi\n                            ))\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    function RenderContentView() {\n\n        if (netWorkID === undefined) {\n            return null\n        }\n\n        switch (contentState.type) {\n            case 'method': {\n                return (\n                    <FunctionContent\n                        contract={(contentState as StateCreator.ContractMethodState).contract!}\n                        abi={(contentState as StateCreator.ContractMethodState).abi!}\n                        networkID={netWorkID}\n                    />\n                )\n            }\n\n            case 'setting': {\n                return (\n                    <ContractSetting\n                        contract={(contentState as StateCreator.ContractSettingState).contract!}\n                        networkID={netWorkID}\n                    />\n                )\n            }\n\n            case 'trasnfer': {\n                return (\n                    <GroupTransfer\n                        group={(contentState as StateCreator.TransferGroupState).group!}\n                    />\n                )\n            }\n\n            case 'upload': {\n                return <ContractImport\n                    onCheckedCompiledContract={\n                        contract => {\n                            setContracts(contracts.concat(contract));\n                        }\n                    }\n                    onDropFile={\n                        (e) => {\n                            let files = e.dataTransfer.files;\n                            let jsonReaders = [];\n                            let xlsxReaders = [];\n\n                            for (let i = 0; i < files.length; i++) {\n                                let fileName = (files[i].name as string)\n                                if (fileName.endsWith(\"json\")) {\n                                    jsonReaders.push(readContractAsync(files[i]))\n                                } else if (fileName.endsWith(\"xlsx\")) {\n                                    xlsxReaders.push(readExeclAsync(files[i]))\n                                }\n                            }\n\n                            Promise.all(jsonReaders).then(dropedContract => {\n                                setContracts(contracts.concat(dropedContract));\n                            })\n\n                            Promise.all(xlsxReaders).then(groups => {\n                                setTransferGroups(transferGroups.concat(groups));\n                            })\n                        }\n                    } />\n            }\n\n            default: {\n                return (\n                    <Layout.Content style={{\n                        minHeight: '100%',\n                        background: 'white',\n                    }}>\n                        <Result\n                            status=\"404\"\n                            title=\"无效菜单路径\"\n                            subTitle=\"抱歉，你选择的菜单似乎没有找到对应的内容。\"\n                        />\n                    </Layout.Content>\n                )\n            }\n        }\n    }\n\n    return (\n        netWorkID === undefined\n            ? null\n            : <Layout>\n                <ContractMenu\n                    contracts={contracts}\n                    transferGroups={transferGroups}\n                    onSelected={onMenuSelect}\n                    onDropFile={\n                        (e) => {\n                            let files = e.dataTransfer.files;\n                            let readers = [];\n\n                            for (let i = 0; i < files.length; i++) {\n                                readers.push(readContractAsync(files[i]))\n                            }\n\n                            Promise.all(readers).then(dropedContract => {\n                                setContracts(contracts.concat(dropedContract));\n                            })\n                        }\n                    }\n                />\n                <Layout className=\"site-layout\">\n                    <Layout.Sider\n                        width=\"80vw\"\n                        style={{\n                            marginLeft: '20vw',\n                            overflow: 'auto',\n                            position: 'fixed',\n                            width: '100%',\n                            height: '100%',\n                            left: 0,\n                        }}\n                    >\n                        <RenderContentView />\n                    </Layout.Sider>\n                </Layout>\n            </Layout>\n    )\n}\n","import { AbiItem } from 'web3-utils';\nimport { CompiledContract } from \"../../components/compile_contract\";\nimport { TransferGroup } from '../../components/structs/TransferGroup';\n\nexport type Types = 'setting' | 'upload' | 'method' | 'trasnfer';\n\n// 抽象\nexport interface ContentViewState {\n    type: Types\n}\n\n// 设置页面\nexport interface ContractSettingState extends ContentViewState {\n    contract: CompiledContract\n}\n\n// abi页面包含function和event\nexport interface ContractMethodState extends ContentViewState {\n    contract: CompiledContract,\n    abi: AbiItem\n}\n\n// 批量装张页面\nexport interface TransferGroupState extends ContentViewState {\n    group: TransferGroup\n}\n\nexport const SettingState = (contract: CompiledContract): ContractSettingState => {\n    return {\n        type: 'setting',\n        contract: contract\n    }\n}\n\nexport const ABIState = (contract: CompiledContract, abi: AbiItem): ContractMethodState => {\n    return {\n        type: 'method',\n        contract: contract,\n        abi: abi,\n    }\n}\n\nexport const TransferState = (group: TransferGroup): TransferGroupState => {\n    return {\n        type: 'trasnfer',\n        group: group\n    }\n}\n\nexport const UploadState = (): ContentViewState => { return { type: 'upload' } }","import { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport ContractLookupPage from './contract_lookup';\n\nconst BasicRoute = () => (\n    <HashRouter>\n        <Switch>\n            <Route exact path=\"/\">\n                <Redirect to=\"/lookup\" />\n            </Route>\n            <Route exact path=\"/lookup\" component={ContractLookupPage} />\n        </Switch>\n    </HashRouter>\n);\n\nexport default BasicRoute;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BasicRoute from './views/router';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BasicRoute />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}