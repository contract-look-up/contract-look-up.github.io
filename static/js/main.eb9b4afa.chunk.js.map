{"version":3,"sources":["utils/index.tsx","components/natspec/index.tsx","components/abi_caller/response/index.tsx","components/abi_caller/inputs/index.tsx","components/abi_caller/request/index.tsx","components/abi_caller/function.tsx","components/abi_caller/event.tsx","components/abi_caller/deploy.tsx","components/source_code/index.tsx","views/contract_lookup/content/index.tsx","views/contract_lookup/contract_setting/index.tsx","views/contract_importer/create_by_template.tsx","components/deployer/index.tsx","views/contract_importer/deploy_by_template.tsx","views/contract_importer/index.tsx","views/contract_lookup/contract_menu/index.tsx","views/contract_lookup/index.tsx","views/contract_lookup/states.tsx","views/router.tsx","reportWebVitals.ts","index.tsx"],"names":["functionFormatStringFromABI","abi","inputFormat","inputs","map","type","join","name","functionSourceCodeFormatFromABI","indexed","outputFormat","outputs","length","undefined","stateMutability","matchingTypeDescription","content","reg","matchGroup","exec","replaceAll","trim","bindInputs","fromData","doc","params","_","index","binded","console","log","forEach","input","secondaryType","typeEncode","endsWith","includes","splited","split","Error","push","value","toWei","toLowerCase","LogsDisplay","props","data","web3","devdoc","columns","extDesc","NatspecExt","title","dataIndex","key","render","text","dataSource","decoedLog","eth","decodeLog","raw","topics","slice","encodeObject","parseFloat","fromWei","toFixed","toUpperCase","toString","moment","unix","format","bodyStyle","padding","bordered","ResponseDisplay","record","Array","returns","output","timestempUnix","parseInt","decodeParameters","param","desc","pagination","expandable","expandedRowRender","displayDataTypes","displayObjectSize","src","rowExpandable","Option","Select","InputTextFromItem","arg","regExp","errorMessage","fieldName","required","secondary","rules","validator","inputValue","a","subInput","test","Promise","reject","resolve","Item","label","TextArea","autoSize","style","color","placeholder","addonAfter","TypeInputText","RegExp","TypeInputNumber","TypeInputAddress","CreationsMapping","allowClear","unit","CreationInputElement","lableText","e","Title","size","loading","spinning","RequestDisplay","state","onError","onHash","onReceipt","waitingResponse","width","wordBreak","wordWrap","enableClipboard","className","message","ABIFunctionCallerView","Form","useForm","form","useState","originAbi","setOriginAbi","callingState","setCallingState","sendingState","setSendingState","clearCallingState","error","result","clearSendingState","isSendCommit","resetFields","isWriteFunction","margin","marginTop","layout","onFinish","contractAddress","setTimeout","currentProvider","sendAsync","method","response","senderAddress","binedData","transaction","from","to","encodeFunctionCall","sendTransaction","on","hash","receipt","_send","call","then","outputRaw","catch","_call","display","justifyContent","htmlType","disabled","marginRight","onClick","danger","marginLeft","ABIEventCallerView","setWaitingResponse","logsData","setLogsData","values","filter","i","Contract","getPastEvents","fromBlock","toBlock","logs","reason","ABIDeployCallerView","originContact","setOriginContract","deployedContract","setDeployedContract","compileContract","constructorABI","find","constructorDevDoc","methods","contractDeployer","deploy","bytecode","arguments","send","net","getId","networkid","contractInstance","JSON","parse","stringify","contractName","networks","address","onDeployed","SourceCodeCard","language","codeStyle","sourceCode","SyntaxHighlighter","registerLanguage","solidity","FunctionContent","contract","networkID","Web3","window","ethereum","deployedAddress","fname","utils","userdoc","eventDoc","events","Details","details","Content","minHeight","background","borderLeftColor","borderLeftWidth","borderLeftStyle","ghost","onBack","subTitle","notice","paddingBottom","NetWorkTable","connected","row","status","ContractSetting","column","xxl","xl","lg","md","sm","xs","compiler","version","updatedAt","source","templates","require","CreateInstanceByTemplate","confirmLoading","setConfirmLoading","useEffect","visible","okText","maskClosable","centered","destroyOnClose","onOk","formData","getFieldsValue","template_index","contract_address","template","getCode","codes","contract_name","onSuccess","finally","onCancel","okButtonProps","labelAlign","item","pattern","Deployer","matadata","metadata","settings","evmVersion","optimizer","enabled","runs","expandIconPosition","collapsible","borderTopStyle","borderColor","Panel","header","extra","copy","success","duration","CopyOutlined","DeployInstanceByTemplate","step","setStep","footer","rowSelection","onChange","selectedRowKeys","selectedRows","getCheckboxProps","template_name","showHeader","description","ContractImport","onDropContractFile","onCheckedCompiledContract","modalState","setModalState","itemRender","openFileDialogOnClick","onDrop","directory","UploadOutlined","icon","PlusCircleOutlined","labelText","modalType","SubnodeOutlined","ImportOutlined","marginBottom","ContractMenu","ownerAddress","setOwnerAddress","MenuHeader","height","UserOutlined","Sider","theme","overflow","position","left","breakpoint","mode","borderRight","contracts","contractObject","contractIndex","SubMenu","ProfileFilled","onSelected","SettingFilled","AreaChartOutlined","abiFun","funSignFormat","encodeFunctionSignature","BarChartOutlined","readContractAsync","file","reader","FileReader","readAsText","onload","longContract","shotContract","ContractLookupPage","setContracts","netWorkID","setNetWorkID","contentState","setContetState","RenderContentView","concat","files","dataTransfer","readers","all","dropedContract","netID","info","paths","keyPath","c","StateCreator","onDropFile","BasicRoute","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.eb9b4afa.chunk.js","sourcesContent":["import { AbiItem } from 'web3-utils';\n\nexport function functionFormatStringFromABI(abi: AbiItem): string {\n    let inputFormat = abi.inputs?.map((abi) => {\n        return abi.type\n    }).join(',');\n\n    return `${abi.name}(${inputFormat})`;\n}\n\nexport function functionSourceCodeFormatFromABI(abi: AbiItem): string {\n\n    let inputFormat = abi.inputs?.map((abi) => {\n        if (abi.indexed) {\n            return `\\t${abi.type} indexed ${abi.name}`\n        } else {\n            return `\\t${abi.type} ${abi.name}`\n        }\n\n    }).join(',\\n');\n\n    let outputFormat = abi.outputs?.map((abi) => {\n        return \"\\t\" + abi.type + (abi.name.length > 0 ? ` ${abi.name}` : \"\")\n    }).join(',\\n')\n\n    let name = `${abi.type} ${abi.name}(${abi.inputs?.length === 0 ? \"\" : `\\n${inputFormat}\\n`})${abi.stateMutability === undefined ? '' : ' ' + abi.stateMutability}`\n\n    if (abi.type === 'function') {\n        if (outputFormat !== undefined && outputFormat?.length > 0) {\n            name = name + ` returns (\\n${outputFormat}\\n)`\n        }\n    }\n\n    return name + \";\";\n}","import { AbiItem, toWei, fromWei, Unit } from 'web3-utils'\nimport moment from 'moment';\n\nexport interface DevMethodDoc {\n    details?: string,\n    params?: any,\n    returns?: any\n}\n\nexport interface UserMethodDoc {\n    notice?: string,\n}\n\nexport interface UserDocs {\n    kind?: string,\n    methods?: any,\n    version?: number\n}\n\nexport interface DeveloperDocs {\n    kind?: string,\n    events?: any,\n    methods?: any,\n    version?: number,\n    stateVariables?: any[],\n}\n\nexport interface NatspecDocs {\n    userdoc: UserDocs,\n    devdoc: DeveloperDocs\n}\n\nexport type SecondaryType =\n    '$amount:ether' |\n    '$amount:szabo' |\n    '$amount:mwei' |\n    '$number' |\n    '$timestemp'\n\nexport interface ExtDescription {\n    content: string,\n    // 次要类型缺失时，按照主类型处理即可，比如address类型\n    type?: SecondaryType\n}\n\n// 获取在注释中定义的类型信息,如 $number, $timestemp 等\nexport function matchingTypeDescription(content?: string): ExtDescription | undefined {\n    if (content === undefined) {\n        return undefined;\n    }\n\n    const reg = /\\s?\\$[a-z]+(:[a-z]+)?\\s?/gi;\n    const matchGroup = reg.exec(content)\n\n    return {\n        content: content.replaceAll(reg, \"\"),\n        type: matchGroup == null ? undefined : matchGroup[0].trim() as SecondaryType,\n    };\n}\n\n// 由于有一些配置了次要类型的字段，需要就行转换此处需要根据次要类型列表生产实际的最终交易参数，\n// 特别是处理的amount类型的次要类型,参数的字段需要严格按照input的顺序输入\nexport function bindInputs(abi: AbiItem, fromData: any[], doc?: DevMethodDoc): any[] {\n\n    // 没有定义Doc的情况，直接返回原值\n    if (doc?.params === undefined) {\n        return abi.inputs?.map((_, index) => fromData[index])!\n    }\n\n    // 参数的类型列表\n    const binded: Array<any> = [];\n\n    console.log(fromData);\n\n    abi.inputs?.forEach((input, index) => {\n        // 获取函数的extDesc对象\n        const secondaryType = matchingTypeDescription(doc.params[input.name])?.type;\n        const typeEncode = input.type + (secondaryType ? secondaryType : '');\n\n        if (input.type.endsWith('[]')) {\n            // 只需要转换$amount类型\n            if (typeEncode.includes('$amount:')) {\n                const splited = typeEncode.split(':');\n                if (splited.length !== 2) {\n                    throw Error(`无效的次要类型定义\"${typeEncode}\"在\"${input.name}\"中，请检查源代码natspec风格注释的[次要类型定义符](在不确定类型的情况下发送交易会导致严重的数据问题).`);\n                }\n\n                binded.push(\n                    (fromData[index] as string).split('\\n').map((value) => toWei(value, splited[1] as Unit))\n                )\n            }\n            else {\n                binded.push((fromData[index] as string).split('\\n'))\n            }\n        } else {\n            // 只需要转换$amount类型\n            if (typeEncode.includes('$amount:')) {\n                const splited = typeEncode.split(':');\n                if (splited.length !== 2) {\n                    throw Error(`无效的次要类型定义\"${typeEncode}\"在\"${input.name}\"中，请检查源代码natspec风格注释的[次要类型定义符](在不确定类型的情况下发送交易会导致严重的数据问题).`);\n                }\n\n                binded.push(toWei(fromData[index], splited[1] as Unit))\n            }\n            // 处理bool类型\n            else if (input.type === \"bool\") {\n                binded.push((fromData[index] as string).toLowerCase() === 'true' ? true : false)\n            }\n            else {\n                binded.push(fromData[index])\n            }\n        }\n    });\n\n    return binded;\n}\n\nexport function bindLogs(abi: AbiItem, fromData: { [key: string]: any }, doc?: DevMethodDoc): { [key: string]: any } {\n    // 没有定义Doc的情况，直接返回原值\n    if (doc === undefined) {\n        return fromData;\n    }\n\n    // 参数的类型列表\n    const encodeObject: any = { }\n\n    abi.inputs?.forEach((input, index) => {\n        // 获取函数的extDesc对象\n        const secondaryType = matchingTypeDescription(doc.params[input.name])?.type;\n        const typeEncode = input.type + (secondaryType ? secondaryType : '');\n        const value = fromData[index];\n\n        // 只需要转换$amount类型\n        if (typeEncode.includes('$amount:')) {\n            const splited = typeEncode.split(':');\n            if (splited.length !== 2) {\n                throw Error(`无效的次要类型定义\"${typeEncode}\"在\"${input.name}\"，请检查源代码natspec风格注释的[次要类型定义符](在不确定类型的情况下发送交易会导致严重的数据问题).`);\n            }\n\n            if (input.type.endsWith('[]')) {\n                encodeObject[input.name] =\n                    (fromData[index] as string[]).map((value) => parseFloat(\n                        fromWei(\n                            value,\n                            splited[1] as Unit\n                        )\n                    ).toFixed(8) + ` ${splited[1].toUpperCase()}`)\n\n\n            } else {\n                encodeObject[input.name] = parseFloat(fromWei(fromData[index], splited[1] as Unit)).toString() + ` ${splited[1].toUpperCase()}`\n            }\n        } else if (typeEncode.includes('$timestemp')) {\n            encodeObject[input.name] = moment.unix(value).format('YYYY-MM-DD HH:mm:ss')\n        } else {\n            encodeObject[input.name] = value;\n        }\n    });\n\n    return encodeObject;\n}\n\nexport function bindOutputs(abi: AbiItem, fromData: { [key: string]: any }, doc?: DevMethodDoc): { [key: string]: any } {\n    // 没有定义Doc的情况，直接返回原值\n    if (doc?.returns === undefined) {\n        return fromData;\n    }\n\n    // 参数的类型列表\n    const binded: Array<any> = [];\n\n    abi.outputs?.forEach((output, index) => {\n        // 获取函数的extDesc对象\n        const secondaryType = matchingTypeDescription(doc.returns[output.name])?.type;\n        const typeEncode = output.type + (secondaryType ? secondaryType : '');\n\n        // 只需要转换$amount类型\n        if (typeEncode.includes('$amount:')) {\n            const splited = typeEncode.split(':');\n            if (splited.length !== 2) {\n                throw Error(`无效的次要类型定义\"${typeEncode}\"在\"${output.name}\"，请检查源代码natspec风格注释的[次要类型定义符](在不确定类型的情况下发送交易会导致严重的数据问题).`);\n            }\n\n            if (output.type.endsWith('[]')) {\n                binded.push(\n                    (fromData[index] as string[]).map((value) => parseFloat(\n                        fromWei(\n                            value,\n                            splited[1] as Unit\n                        )\n                    ).toFixed(8) + ` ${splited[1].toUpperCase()}`)\n                )\n            } else {\n                binded.push(parseFloat(fromWei(fromData[index], splited[1] as Unit)).toString() + ` ${splited[1].toUpperCase()}`)\n            }\n        } else if (typeEncode.includes('$timestemp')) {\n            const timestempUnix = parseInt(fromData[index]);\n\n            binded.push(\n                timestempUnix > 0\n                    ? moment.unix(timestempUnix).format('YYYY-MM-DD HH:mm:ss')\n                    : \"无\"\n            )\n        }\n        else {\n            binded.push(fromData[index])\n        }\n    });\n\n    return binded;\n}","import Web3 from 'web3';\nimport { EventData } from 'web3-eth-contract';\nimport { AbiItem } from 'web3-utils';\nimport { Table, Card } from 'antd';\nimport { DevMethodDoc } from '../../natspec'\nimport ReactJson from 'react-json-view';\nimport * as NatspecExt from '../../natspec'\n\nexport function LogsDisplay(props: {\n    abi: AbiItem,\n    data?: EventData[],\n    web3: Web3,\n    devdoc?: DevMethodDoc\n}) {\n    const { abi, data, web3, devdoc } = props;\n\n    const columns =\n        abi.inputs?.map(input => {\n            const extDesc = devdoc && devdoc.params && devdoc.params[input.name]\n                ? NatspecExt.matchingTypeDescription(devdoc.params[input.name])\n                : undefined;\n            return {\n                title: extDesc !== undefined ? extDesc.content : input.name,\n                dataIndex: input.name,\n                key: input.name,\n                render: (text: string) => <span>{text}</span>\n            }\n        });\n\n    const dataSource = data?.map((log, index) => {\n        const decoedLog = web3.eth.abi.decodeLog(abi.inputs!, log.raw.data, log.raw.topics.slice(1))\n        return NatspecExt.bindLogs(abi, decoedLog, props.devdoc)\n    })\n\n    return (\n        <Card title=\"Fethed Logs\" bodyStyle={{ padding: 0 }}>\n            <Table\n                columns={columns}\n                dataSource={dataSource}\n                bordered\n            // pagination={false}\n            />\n        </Card>\n    )\n}\n\nexport function ResponseDisplay(props: {\n    abi: AbiItem,\n    data: string,\n    web3: Web3,\n    devdoc?: DevMethodDoc\n}) {\n    const { abi, data, web3, devdoc } = props;\n\n    const columns = [\n        {\n            title: '参数名',\n            dataIndex: 'param',\n            key: 'param',\n            render: (text: string) => <span>{text}</span>\n        },\n        {\n            title: '类型',\n            dataIndex: 'type',\n            key: 'type',\n            render: (text: string) => <span>{text}</span>\n        },\n        {\n            title: '描述',\n            dataIndex: 'desc',\n            key: 'desc',\n            render: (text: string) => <span>{text}</span>\n        },\n        {\n            title: '返回值',\n            dataIndex: 'value',\n            key: 'value',\n            render: (text: any, record: any) => <span>\n                {(record.type as string).endsWith('[]') ? (record.type as string).replaceAll('[]', `[${text.length}]`) : text}\n            </span>,\n        }\n    ]\n\n    const outputs = new Array<{\n        key: number,\n        param: string,\n        type: string,\n        value: string | Object,\n        desc?: string,\n    }>()\n\n    if (abi.outputs !== undefined && abi.outputs.length > 0) {\n        const values = web3.eth.abi.decodeParameters(\n            abi.outputs,\n            data\n        )\n\n        const binded = NatspecExt.bindOutputs(abi, values, props.devdoc)\n\n        abi.outputs.forEach((output, index) => {\n            const extDesc = devdoc && devdoc.returns && devdoc.returns[output.name]\n                ? NatspecExt.matchingTypeDescription(devdoc.returns[output.name])\n                : undefined;\n\n            outputs.push({\n                key: index,\n                param: output.name !== undefined && output.name.length > 0 ? output.name : '未命名',\n                type: output.type,\n                value: typeof binded[index] === 'boolean' ? (binded[index] ? '是' : '否') : binded[index],\n                desc: extDesc !== undefined ? extDesc.content : \"无\"\n            })\n        })\n    }\n\n    return (\n        <Card title=\"Outputs\" bodyStyle={{ padding: 0 }}>\n            <Table\n                columns={columns}\n                dataSource={outputs}\n                bordered\n                pagination={false}\n                expandable={{\n                    expandedRowRender: (record) => {\n                        return (\n                            <ReactJson displayDataTypes={false} displayObjectSize={false} src={record.value as Object} />\n                        )\n                    },\n                    rowExpandable: record => record.type.endsWith('[]')\n                }}\n            />\n        </Card>\n    )\n}\n\n","import { AbiInput } from 'web3-utils';\nimport { Form, Input, Select } from 'antd';\nimport { SecondaryType, matchingTypeDescription } from '../../natspec'\n\nconst { Option } = Select;\n\ntype InputCreateHandle = (input: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => JSX.Element\n\nconst InputTextFromItem = (\n    arg: AbiInput,\n    regExp: RegExp,\n    errorMessage: string,\n    fieldName: string,\n    desc: string,\n    required: boolean,\n    secondary?: SecondaryType\n) => {\n    const rules =\n        [\n            {\n                validator: async (_: any, inputValue: string) => {\n                    if (arg.type.endsWith('[]')) {\n                        for (let subInput of inputValue.split('\\n')) {\n                            if (!regExp.test(subInput)) {\n                                return Promise.reject(new Error(errorMessage))\n                            }\n                        }\n                        return Promise.resolve();\n\n                    } else {\n                        if ((inputValue === undefined || inputValue.length <= 0) && !required) {\n                            return Promise.resolve();\n                        }\n                        return !regExp.test(inputValue)\n                            ? Promise.reject(new Error(errorMessage))\n                            : Promise.resolve();\n                    }\n                },\n            },\n        ];\n\n    return (\n        <Form.Item\n            name={fieldName}\n            label={desc}\n            rules={rules}\n            required={required}\n        >\n            {\n                arg.type.endsWith('[]')\n                    ?\n                    <div>\n                        <Input.TextArea autoSize={true} />\n                        <span style={{\n                            color: 'blue'\n                        }}>{`* 该字段类型为${arg.type.toUpperCase()},请在输入框中已换行分割每一个元素。`}</span>\n                    </div>\n                    : <Input placeholder=\"\" addonAfter={arg.type.toUpperCase()} />\n            }\n        </Form.Item>\n    )\n}\n\nconst TypeInputText: InputCreateHandle = (arg: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => {\n    return InputTextFromItem(arg, new RegExp('.+'), '该字段不能为空', name, desc, required, secondary)\n}\n\nconst TypeInputNumber: InputCreateHandle = (arg: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => {\n    return InputTextFromItem(arg, new RegExp('.+'), '该字段不能为空', name, desc, required, secondary)\n}\n\nconst TypeInputBoolean: InputCreateHandle = (arg: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => {\n    return (\n        <Form.Item name={name} label={desc} required={required} >\n            <Select\n                placeholder=\"请选择\"\n                allowClear\n            >\n                <Option value=\"true\">是</Option>\n                <Option value=\"false\">否</Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nconst TypeInputAddress: InputCreateHandle = (arg: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => {\n    return InputTextFromItem(\n        arg,\n        new RegExp('^0x([0-9]|[a-z]|[A-Z]){40}$'), '请输入一个正确的十六进制地址，已0x开头',\n        name,\n        desc,\n        required,\n        secondary\n    )\n}\n\nconst TypeInputAmount: InputCreateHandle = (arg: AbiInput, name: string, desc: string, required: boolean, secondary?: SecondaryType) => {\n    const unit = secondary!.toString().split(':')[1];\n    return (\n        <Form.Item name={name} label={desc} required={required}>\n            <Input type=\"number\" name={name} placeholder=\"\" addonAfter={unit.toUpperCase()} />\n        </Form.Item >\n    )\n}\n\nconst CreationsMapping = {\n    \"bool\": TypeInputBoolean,\n    \"string\": TypeInputText,\n    \"address\": TypeInputAddress,\n    \"address[]\": TypeInputAddress,\n    \"int256\": TypeInputNumber,\n    \"uint256\": {\n        undefined: TypeInputNumber,\n        '$amount:ether': TypeInputAmount\n    }\n} as any\n\nfunction CreationInputElement(input: AbiInput, name: string, desc?: string): JSX.Element {\n\n    const extDesc = matchingTypeDescription(desc)\n    const lableText = input.name + (extDesc ? ` (${extDesc.content})` : '')\n\n    try {\n        if (typeof CreationsMapping[input.type] == 'function') {\n            return CreationsMapping[input.type](input, name, lableText, !input.indexed, extDesc?.type)\n        }\n        else if (\n            typeof CreationsMapping[input.type] == 'object' &&\n            extDesc?.type\n        ) {\n            return CreationsMapping[input.type][extDesc!.type](input, name, lableText, !input.indexed, extDesc?.type)\n        }\n\n        throw Error(\"Can not find type\")\n\n    } catch (e) {\n        return TypeInputText(input, name, lableText, !input.indexed, extDesc?.type)\n    }\n}\n\nexport default CreationInputElement;","import { Card, Space, Spin } from 'antd';\nimport ReactJson from 'react-json-view';\n\nexport interface TxSendingState {\n    waitingResponse: boolean;\n    onHash?: string,\n    onError?: any,\n    onReceipt?: any,\n}\n\nfunction Title(props: { loading: boolean }) {\n    return (\n        <Space size=\"middle\" >\n            {props.loading ? 'Pending' : 'Result'}\n            <Spin size=\"small\" spinning={props.loading} />\n        </Space>\n    )\n}\n\nexport function RequestDisplay(props: {\n    state: TxSendingState\n}) {\n    return props.state.onError === undefined\n        && props.state.onHash === undefined\n        && props.state.onReceipt === undefined\n        ? null\n        : (\n            <Card\n                style={{\n                    padding: 0,\n                }}\n                title={<Title loading={props.state.waitingResponse} />}>\n                {props.state.onHash !== undefined ? <Card style={{ padding: 0 }} title=\"Hash\">{props.state.onHash}</Card> : null}\n                {\n                    props.state.onReceipt !== undefined\n                        ? <Card style={{ padding: 0 }} title=\"Receipt\">\n                            <ReactJson\n                                style={{\n                                    width: '100%',\n                                    wordBreak: 'break-all',\n                                    wordWrap: 'break-word',\n                                }}\n                                enableClipboard={false}\n                                displayDataTypes={false}\n                                displayObjectSize={false}\n                                src={props.state.onReceipt as Object}\n                            />\n                        </Card>\n                        : null\n                }\n                {props.state.onError !== undefined ? <Card style={{ padding: 0 }} title=\"Error\" className=\"errorMessage\">{props.state.onError.message}</Card> : null}\n            </Card>\n        )\n}","import Web3 from 'web3';\nimport { useState } from 'react';\nimport { AbiItem } from 'web3-utils';\nimport { Form, Button, Card } from 'antd';\nimport * as NatspecExt from '../natspec'\nimport { ResponseDisplay } from './response'\nimport './index.scss'\nimport './inputs'\nimport CreationInputElement from './inputs';\nimport { TxSendingState, RequestDisplay } from './request';\n\ninterface TxCallingState {\n    waitingResponse: boolean,\n    error?: Error,\n    result?: any\n}\n\nexport function ABIFunctionCallerView(props: {\n    web3: Web3,\n    abi: AbiItem,\n    contractAddress?: string,\n    devdoc?: NatspecExt.DevMethodDoc,\n    userdoc?: NatspecExt.UserMethodDoc,\n    style?: React.CSSProperties,\n    className?: string\n}) {\n    const [form] = Form.useForm();\n    const [originAbi, setOriginAbi] = useState<AbiItem>();\n    const [callingState, setCallingState] = useState<TxCallingState>({\n        waitingResponse: false,\n    });\n\n    const [sendingState, setSendingState] = useState<TxSendingState>({\n        waitingResponse: false,\n        onHash: undefined,\n        onReceipt: undefined,\n        onError: undefined\n    })\n\n    const clearCallingState = () => {\n        setCallingState({\n            waitingResponse: false,\n            error: undefined,\n            result: undefined\n        })\n    }\n    const clearSendingState = () => {\n        setSendingState({\n            waitingResponse: false,\n            onHash: undefined,\n            onReceipt: undefined,\n            onError: undefined\n        })\n    }\n\n    let isSendCommit = false\n\n    if (originAbi !== props.abi) {\n        form.resetFields();\n        setOriginAbi(props.abi);\n        setCallingState({\n            waitingResponse: false,\n        });\n        clearSendingState();\n    }\n\n    // 该方法是否需要Send\n    const isWriteFunction = ['nonpayable', 'payable'].includes(props.abi.stateMutability!.toString())\n\n    function _send(fromData: any) {\n\n        clearSendingState();\n        clearCallingState();\n\n        if (props.contractAddress === undefined) {\n            setSendingState({\n                waitingResponse: false,\n                onError: new Error('当前连接的网络，并未部署当前合约的实例，请检查networks或者当前连接的网络是否正确。'),\n            });\n\n            return;\n        }\n\n        setSendingState({ waitingResponse: true })\n\n        return new Promise<void>((resolve, reject) => {\n            setTimeout(() => {\n                try {\n                    (props.web3.currentProvider as any).sendAsync({\n                        method: \"eth_requestAccounts\"\n                    }, async (error: Error, response: any) => {\n                        if (error == null) {\n\n                            const senderAddress = response.result[0];\n                            let binedData = [];\n                            if (props.abi.inputs !== undefined && props.abi.inputs.length > 0) {\n                                binedData = NatspecExt.bindInputs(props.abi, fromData, props.devdoc);\n                            }\n\n                            const transaction = {\n                                from: senderAddress,\n                                to: props.contractAddress,\n                                data: props.web3.eth.abi.encodeFunctionCall(\n                                    props.abi,\n                                    binedData.map((value) => value)\n                                )\n                            }\n\n                            let onHash: string;\n\n                            props.web3.eth.sendTransaction(transaction)\n                                .on(\"transactionHash\", hash => {\n                                    setSendingState({\n                                        waitingResponse: true,\n                                        onHash: hash,\n                                    })\n                                    onHash = hash;\n                                })\n                                .on(\"receipt\", receipt => {\n                                    setSendingState({\n                                        waitingResponse: false,\n                                        onHash: onHash,\n                                        onReceipt: receipt,\n                                    })\n                                })\n                                .on(\"error\", error => {\n                                    setSendingState({\n                                        waitingResponse: false,\n                                        onError: error\n                                    })\n                                })\n                        } else {\n                            setSendingState({\n                                waitingResponse: false,\n                                onError: error,\n                            });\n                        }\n                    })\n                } catch (e) {\n                    setSendingState({\n                        waitingResponse: false,\n                        onError: e as Error,\n                        onReceipt: undefined,\n                        onHash: undefined,\n                    });\n                }\n            }, 500);\n        })\n    }\n\n    function _call(fromData: any) {\n\n        clearSendingState();\n        clearCallingState();\n\n        if (props.contractAddress === undefined) {\n            setCallingState({\n                waitingResponse: false,\n                error: new Error('当前连接的网络，并未部署当前合约的实例，请检查networks或者当前连接的网络是否正确。'),\n            })\n            return;\n        }\n\n        setCallingState({\n            waitingResponse: true,\n        });\n\n        return new Promise<void>((resolve, reject) => {\n            setTimeout(() => {\n                try {\n                    (props.web3.currentProvider as any).sendAsync({\n                        method: \"eth_requestAccounts\"\n                    }, async (error: Error, response: any) => {\n                        if (error == null) {\n\n                            const senderAddress = response.result[0];\n                            let binedData = [];\n                            if (props.abi.inputs !== undefined && props.abi.inputs.length > 0) {\n                                binedData = NatspecExt.bindInputs(props.abi, fromData, props.devdoc);\n                            }\n\n                            const transaction = {\n                                from: senderAddress,\n                                to: props.contractAddress,\n                                data: props.web3.eth.abi.encodeFunctionCall(\n                                    props.abi,\n                                    binedData.map((value) => value)\n                                )\n                            }\n\n                            props.web3.eth.call(transaction)\n                                .then(outputRaw => {\n                                    setCallingState({\n                                        waitingResponse: false,\n                                        result: outputRaw\n                                    });\n                                })\n                                .catch(e => {\n                                    setCallingState({\n                                        waitingResponse: false,\n                                        error: e as Error\n                                    });\n                                });\n\n                        } else {\n                            setCallingState({\n                                waitingResponse: false,\n                                error: error,\n                            });\n                        }\n                    })\n                } catch (e) {\n                    setCallingState({\n                        waitingResponse: false,\n                        error: e as Error\n                    });\n                }\n            }, 500);\n        })\n    }\n\n    return (\n        <div style={props.style} className={props.className}>\n            <Card title=\"Inputs\" style={{\n                width: \"100%\",\n                padding: \"0px\",\n                margin: \"0px\",\n                marginTop: \"20px\",\n            }}>\n                <Form\n                    form={form}\n                    layout=\"vertical\"\n                    onFinish={\n                        (data) => {\n                            isSendCommit\n                                ? _send(data)\n                                : _call(data)\n                        }}\n                >\n                    {\n                        props.abi.inputs === undefined || props.abi.inputs?.length <= 0\n                            ? null\n                            : props.abi.inputs?.map((arg, index) =>\n                                CreationInputElement(\n                                    arg,\n                                    `${index}`,\n                                    props.devdoc\n                                        && props.devdoc.params\n                                        && props.devdoc.params[arg.name]\n                                        ? props.devdoc.params[arg.name]\n                                        : undefined\n                                )\n                            )\n                    }\n                    <Form.Item>\n                        <div style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\"\n                        }}>\n                            <Button\n                                type=\"primary\"\n                                size=\"large\"\n                                htmlType=\"submit\"\n                                loading={callingState.waitingResponse}\n                                disabled={sendingState.waitingResponse}\n                                style={{\n                                    width: \"100%\",\n                                    marginRight: isWriteFunction ? \"20px\" : \"0px\"\n                                }}\n                                onClick={() => {\n                                    isSendCommit = false\n                                }}\n                            >\n                                Call\n                            </Button>\n                            {\n                                isWriteFunction\n                                    ? <Button\n                                        type=\"primary\"\n                                        danger\n                                        size=\"large\"\n                                        htmlType=\"submit\"\n                                        loading={sendingState.waitingResponse}\n                                        disabled={callingState.waitingResponse}\n                                        style={{\n                                            width: \"100%\",\n                                            marginLeft: \"20px\"\n                                        }}\n                                        onClick={() => {\n                                            isSendCommit = true\n                                        }}\n                                    >\n                                        Send\n                                    </Button>\n                                    : null\n                            }\n                        </div>\n                    </Form.Item>\n                </Form>\n            </Card>\n            {\n                callingState.result\n                    ? <ResponseDisplay\n                        web3={props.web3}\n                        abi={props.abi}\n                        data={callingState.result}\n                        devdoc={props.devdoc}\n                    />\n                    : null\n            }\n            {\n                callingState.error\n                    ? <Card\n                        className=\"errorMessage\"\n                        title=\"Error Infomation\"\n                    >\n                        {callingState.error.message}\n                    </Card>\n                    : null\n            }\n            <RequestDisplay state={sendingState} />\n        </div>\n    )\n}","import Web3 from 'web3';\nimport { EventData } from 'web3-eth-contract';\nimport { useState } from 'react';\nimport { AbiItem } from 'web3-utils';\nimport { Form, Button, Card } from 'antd';\nimport * as NatspecExt from '../natspec'\nimport { LogsDisplay } from './response'\nimport CreationInputElement from './inputs';\n\nimport './index.scss'\nimport './inputs'\n\nexport function ABIEventCallerView(props: {\n    web3: Web3,\n    abi: AbiItem,\n    contractAddress: string,\n    devdoc?: NatspecExt.DevMethodDoc,\n    userdoc?: NatspecExt.UserMethodDoc,\n    style?: React.CSSProperties,\n    className?: string\n}) {\n    const { web3 } = props;\n    const [form] = Form.useForm();\n    const [originAbi, setOriginAbi] = useState<AbiItem>();\n    const [waitingResponse, setWaitingResponse] = useState(false);\n    const [logsData, setLogsData] = useState<EventData[]>();\n\n    if (originAbi !== props.abi) {\n        form.resetFields();\n        setOriginAbi(props.abi);\n        setWaitingResponse(false);\n        setLogsData([])\n    }\n\n    function doFetchLogs(values: any) {\n        setWaitingResponse(true);\n\n        const filter: any = { }\n\n        props.abi.inputs?.filter(input => input.indexed)\n            .forEach((input, i) => {\n                filter[input.name] = values[i]\n            });\n\n        // 使用Contract对象请求Logs，因为不想写topics的填充算法\n        const contract = new web3.eth.Contract([props.abi], props.contractAddress);\n        contract.getPastEvents(props.abi.name!, {\n            filter: filter,\n            fromBlock: values.fromBlock,\n            toBlock: values.toBlock\n        }).then((logs) => {\n            setLogsData(logs);\n            setWaitingResponse(false);\n        }).catch(reason => {\n            setWaitingResponse(false);\n        })\n    }\n\n    return (\n        <div style={props.style} className={props.className}>\n            <Card title=\"Filter\" style={{\n                width: \"100%\",\n                padding: \"0px\",\n                margin: \"0px\",\n                marginTop: \"20px\",\n            }}>\n                <Form\n                    form={form}\n                    layout=\"vertical\"\n                    onFinish={doFetchLogs}\n                >\n                    {\n                        CreationInputElement(\n                            {\n                                name: 'fromBlock',\n                                type: 'string',\n                            },\n                            `fromBlock`,\n                            `起始查询区块高度 $number`\n                        )\n                    }\n                    {\n                        CreationInputElement(\n                            {\n                                name: 'toBlock',\n                                type: 'string',\n                            },\n                            `toBlock`,\n                            `结束查询区块高度 $number`\n                        )\n                    }\n                    {\n                        props.abi.inputs === undefined || props.abi.inputs?.length <= 0\n                            ? null\n                            : props.abi.inputs?.filter((input) => input.indexed).map((arg, index) =>\n                                CreationInputElement(\n                                    arg,\n                                    `${index}`,\n                                    props.devdoc\n                                        && props.devdoc.params\n                                        && props.devdoc.params[arg.name]\n                                        ? props.devdoc.params[arg.name]\n                                        : undefined\n                                )\n                            )\n                    }\n                    <Form.Item>\n                        <Button\n                            type=\"primary\"\n                            size=\"large\"\n                            htmlType=\"submit\"\n                            loading={waitingResponse}\n                            style={{\n                                width: \"100%\",\n                            }}\n                        >\n                            {waitingResponse ? 'Fetching' : 'Fetch'}\n                        </Button>\n                    </Form.Item>\n                    {\n                        <LogsDisplay\n                            web3={props.web3}\n                            abi={props.abi}\n                            data={logsData}\n                            devdoc={props.devdoc}\n                        />\n                    }\n                </Form>\n            </Card>\n        </div>\n    )\n}","import Web3 from 'web3';\nimport { useState } from 'react';\nimport { Form, Button, Card } from 'antd';\nimport * as NatspecExt from '../natspec'\nimport './index.scss'\nimport './inputs'\nimport CreationInputElement from './inputs';\nimport { TxSendingState, RequestDisplay } from './request';\nimport { CompiledContract } from '../compile_contract';\n\nexport function ABIDeployCallerView(props: {\n    web3: Web3,\n    compileContract: CompiledContract,\n    style?: React.CSSProperties,\n    className?: string\n    onDeployed: (contract: CompiledContract) => void,\n}) {\n    const [form] = Form.useForm();\n    const [originContact, setOriginContract] = useState<CompiledContract>();\n    const [deployedContract, setDeployedContract] = useState<CompiledContract>();\n\n    const [sendingState, setSendingState] = useState<TxSendingState>({\n        waitingResponse: false,\n        onHash: undefined,\n        onReceipt: undefined,\n        onError: undefined\n    })\n\n    const clearSendingState = () => {\n        setSendingState({\n            waitingResponse: false,\n            onHash: undefined,\n            onReceipt: undefined,\n            onError: undefined\n        })\n    }\n\n    if (originContact !== props.compileContract) {\n        form.resetFields();\n        setOriginContract(props.compileContract);\n        setDeployedContract(undefined);\n        clearSendingState();\n    }\n\n    const constructorABI = props.compileContract.abi.find(abi => abi.type === \"constructor\");\n    if (constructorABI === undefined) {\n        return null;\n    }\n\n    const constructorDevDoc = props.compileContract.devdoc.methods['constructor'];\n\n    const contractDeployer = new props.web3.eth.Contract(props.compileContract.abi);\n\n    function _send(fromData: any) {\n\n        clearSendingState();\n\n        setSendingState({ waitingResponse: true })\n\n        return new Promise<void>((resolve, reject) => {\n            setTimeout(() => {\n                try {\n                    (props.web3.currentProvider as any).sendAsync({\n                        method: \"eth_requestAccounts\"\n                    }, async (error: Error, response: any) => {\n                        if (error == null) {\n\n                            const senderAddress = response.result[0];\n                            let binedData = [];\n                            if (constructorABI!.inputs !== undefined && constructorABI!.inputs.length > 0) {\n                                binedData = NatspecExt.bindInputs(constructorABI!, fromData, constructorDevDoc);\n                            }\n\n                            let onHash: string;\n                            contractDeployer.deploy({\n                                data: props.compileContract.bytecode!,\n                                arguments: binedData.map((value) => value),\n                            })\n                                .send({\n                                    from: senderAddress,\n                                })\n                                .on(\"transactionHash\", hash => {\n                                    setSendingState({\n                                        waitingResponse: true,\n                                        onHash: hash,\n                                    })\n                                    onHash = hash;\n                                })\n                                .on(\"receipt\", receipt => {\n                                    setSendingState({\n                                        waitingResponse: false,\n                                        onHash: onHash,\n                                        onReceipt: receipt,\n                                    })\n\n                                    props.web3.eth.net.getId().then(networkid => {\n                                        const contractInstance = JSON.parse(JSON.stringify(props.compileContract)) as CompiledContract;\n                                        contractInstance.contractName = props.compileContract.contractName;\n                                        contractInstance.networks = { }\n                                        contractInstance.networks[networkid.toString()] = {\n                                            address: receipt.contractAddress!\n                                        }\n\n                                        setDeployedContract(contractInstance);\n                                    })\n                                })\n                                .on(\"error\", error => {\n                                    setSendingState({\n                                        waitingResponse: false,\n                                        onError: error\n                                    })\n                                })\n                        } else {\n                            setSendingState({\n                                waitingResponse: false,\n                                onError: error,\n                            });\n                        }\n                    })\n                } catch (e) {\n                    setSendingState({\n                        waitingResponse: false,\n                        onError: e as Error,\n                        onReceipt: undefined,\n                        onHash: undefined,\n                    });\n                }\n            }, 500);\n        })\n    }\n\n    return (\n        <div style={props.style} className={props.className}>\n            <Card title=\"Constructor Inputs\" style={{\n                width: \"100%\",\n                padding: \"0px\",\n                margin: \"0px\",\n                marginTop: \"20px\",\n            }}>\n                <Form\n                    form={form}\n                    layout=\"vertical\"\n                    onFinish={_send}\n                >\n                    {\n                        constructorABI.inputs === undefined || constructorABI.inputs?.length <= 0\n                            ? null\n                            : constructorABI.inputs?.map((arg, index) =>\n                                CreationInputElement(\n                                    arg,\n                                    `${index}`,\n                                    constructorDevDoc?.params !== undefined\n                                        ? constructorDevDoc.params[arg.name]\n                                        : undefined\n                                )\n                            )\n                    }\n                    <Form.Item>\n                        <div style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\"\n                        }}>\n                            <Button\n                                type=\"primary\"\n                                danger={\n                                    deployedContract === undefined\n                                }\n                                size=\"large\"\n                                htmlType=\"submit\"\n                                loading={sendingState.waitingResponse}\n                                style={{\n                                    width: \"100%\",\n                                }}\n                                onClick={() => {\n                                    if (deployedContract !== undefined) {\n                                        props.onDeployed(deployedContract);\n                                    }\n                                }}\n                            >\n                                {\n                                    deployedContract === undefined ? \"Deploy\" : \"Done\"\n                                }\n                            </Button>\n                        </div>\n                    </Form.Item>\n                </Form>\n            </Card>\n            <RequestDisplay state={sendingState} />\n        </div>\n    )\n}","/*\n * @Author: your name\n * @Date: 2021-08-21 18:41:30\n * @LastEditTime: 2021-08-21 19:17:07\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: /learn-react/src/components/source_code/index.tsx\n */\n\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { coy as codeStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport solidity from 'react-syntax-highlighter/dist/esm/languages/prism/solidity'\n\nSyntaxHighlighter.registerLanguage('solidity', solidity);\n\nexport function SourceCodeCard(props: {\n    sourceCode: string,\n}) {\n    return (\n        <SyntaxHighlighter language=\"solidity\" style={codeStyle}>\n            {props.sourceCode}\n        </SyntaxHighlighter>\n    );\n}","import Web3 from \"web3\";\nimport \"antd/dist/antd.css\";\nimport { Card, Layout, PageHeader } from 'antd';\nimport * as utils from \"../../../utils\"\nimport { AbiItem } from 'web3-utils';\nimport { ABIEventCallerView, ABIFunctionCallerView, CompiledContract, SourceCodeCard } from \"../../../components\"\n\nimport './index.scss';\n\nexport function FunctionContent(props: {\n    contract: CompiledContract,\n    abi: AbiItem,\n    networkID: number\n}) {\n    const { contract, abi, networkID } = props\n\n    const web3 = new Web3((window as any).ethereum);\n\n    const deployedAddress = contract.networks !== undefined ? contract.networks[networkID]?.address : undefined;\n\n    const fname = utils.functionFormatStringFromABI(abi)\n\n    const devdoc = contract.devdoc && contract.devdoc.methods && contract.devdoc.methods[fname] ? contract.devdoc.methods[fname] : undefined\n    const userdoc = contract.userdoc && contract.userdoc.methods && contract.userdoc.methods[fname] ? contract.userdoc.methods[fname] : undefined\n    const eventDoc = contract.devdoc && contract.devdoc.events && contract.devdoc.events[fname] ? contract.devdoc.events[fname] : undefined\n\n    function parsedTitle() {\n        if (contract.userdoc !== undefined\n            && contract.userdoc.methods !== undefined\n            && contract.userdoc.methods[fname] !== undefined\n            && contract.userdoc.methods[fname].notice !== undefined\n        ) {\n            return contract.userdoc.methods[fname].notice;\n        } else {\n            return ''\n        }\n    }\n\n    function Details() {\n        if (contract.devdoc !== undefined\n            && contract.devdoc.methods !== undefined\n            && contract.devdoc.methods[fname] !== undefined\n            && contract.devdoc.methods[fname].details !== undefined\n        ) {\n            return <Card title=\"描述\" className=\"marginCard\">{contract.devdoc.methods[fname].details}</Card>\n        } else {\n            return null\n        }\n    }\n\n    return (\n        <Layout.Content title={abi.name} style={{\n            minHeight: '100%',\n            background: 'white',\n            borderLeftColor: '#EAEAEA',\n            borderLeftWidth: '1px',\n            borderLeftStyle: 'solid'\n        }}>\n            <PageHeader\n                ghost={false}\n                title={abi.name}\n                onBack={() => { }}\n                subTitle={parsedTitle()}\n            // extra={[\n            //     <Button key=\"3\">Operation</Button>,\n            //     <Button key=\"2\">Operation</Button>,\n            //     <Button key=\"1\" type=\"primary\">\n            //         Primary\n            //     </Button>,\n            // ]}\n            />\n            <Details />\n            <Card title=\"原型\" className=\"marginCard\">\n                <SourceCodeCard sourceCode={utils.functionSourceCodeFormatFromABI(abi)} />\n            </Card>\n            {\n                abi.type === 'function'\n                    ? <ABIFunctionCallerView\n                        className=\"marginCard\"\n                        style={{\n                            // marginBottom: '50px'\n                            paddingBottom: '50px'\n                        }}\n                        abi={abi}\n                        web3={web3}\n                        contractAddress={deployedAddress}\n                        devdoc={devdoc}\n                        userdoc={userdoc}\n                    />\n                    : null\n            }\n            {\n                abi.type === 'event'\n                    ? <ABIEventCallerView\n                        className=\"marginCard\"\n                        style={{\n                            // marginBottom: '50px'\n                            paddingBottom: '50px'\n                        }}\n                        abi={abi}\n                        web3={web3}\n                        contractAddress={deployedAddress}\n                        devdoc={eventDoc}\n                        userdoc={userdoc}\n                    />\n                    : null\n            }\n        </Layout.Content >\n    )\n}","import \"antd/dist/antd.css\";\nimport { Card, Layout, PageHeader, Table, Badge } from 'antd';\nimport { CompiledContract, SourceCodeCard } from '../../../components';\nimport { Descriptions } from 'antd';\nimport moment from \"moment\";\n\nfunction NetWorkTable(params: {\n    networks: Object[],\n    networkID: number,\n}) {\n    const { networks, networkID } = params;\n\n    const dataSource = [];\n\n    for (var a in networks) {\n        dataSource.push({\n            connected: parseInt(a) === networkID,\n            networkid: a,\n            contractAddress: (networks[a] as any).address\n        })\n    }\n\n    return (\n        <Card\n            bodyStyle={{ padding: 0 }}\n            style={{\n                marginTop: '20px',\n                marginLeft: '20px',\n                marginRight: '20px',\n                padding: 0,\n            }}\n        >\n            <Table\n                columns={[\n                    {\n                        title: 'NetWork',\n                        dataIndex: 'networkid',\n                        key: 'networkid',\n                        render: (text: string, row) =>\n                            <span>\n                                {\n                                    row.connected ? <Badge status=\"success\" /> : null\n                                }\n                                {\n                                    text\n                                }\n                            </span>\n                    },\n                    {\n                        title: 'Address',\n                        dataIndex: 'contractAddress',\n                        key: 'contractAddress',\n                        render: (text: string) => <span>{text}</span>\n                    },\n                ]}\n                pagination={false}\n                dataSource={dataSource}\n            >\n            </Table>\n        </Card>\n    )\n}\n\n\nexport function ContractSetting(params: {\n    contract: CompiledContract,\n    networkID: number,\n}) {\n    const { contract, networkID } = params;\n\n    return (\n        <Layout.Content style={{\n            minHeight: '100%',\n            background: 'white',\n            borderLeftColor: '#EAEAEA',\n            borderLeftWidth: '1px',\n            borderLeftStyle: 'solid'\n        }}>\n            <PageHeader\n                ghost={false}\n                title={contract.contractName}\n                onBack={() => { }}\n            />\n            <Descriptions\n                title=\"Infomations\"\n                bordered\n                style={{\n                    marginLeft: '20px',\n                    marginRight: '20px',\n                }}\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Descriptions.Item label=\"Name\">{contract.contractName}</Descriptions.Item>\n                <Descriptions.Item label=\"Compiler\">\n                    {\n                        contract.compiler?.name === undefined ? \"None\" : contract.compiler?.name\n                    }\n                </Descriptions.Item>\n                <Descriptions.Item label=\"CompilerVersion\">\n                    {\n                        contract.compiler?.version === undefined ? \"None\" : contract.compiler?.version\n                    }\n                </Descriptions.Item>\n                <Descriptions.Item label=\"UpdateTime\">\n                    {\n                        contract.compiler?.version === undefined ? \"None\" : moment(contract.updatedAt).format('YYYY-MM-DD HH:mm:ss')\n                    }\n                </Descriptions.Item>\n            </Descriptions>\n            <NetWorkTable networks={contract.networks} networkID={networkID} />\n            {\n                contract.source !== undefined\n                    ?\n                    <Card style={{\n                        marginLeft: '20px',\n                        marginRight: '20px',\n                    }}>\n                        <SourceCodeCard sourceCode={contract.source} />\n                    </Card>\n                    : null\n            }\n        </Layout.Content>\n    )\n}","import Web3 from \"web3\";\nimport \"antd/dist/antd.css\";\nimport { useState, useEffect } from \"react\";\nimport { Form, Input, Modal, Select } from 'antd';\nimport { CompiledContract } from \"../../components\";\n\nconst { Option } = Select;\nconst templates: Array<CompiledContract> = [\n    require('../../assets/contract-templates/build/contracts/ERC20TemplateToken.json'),\n]\n\nconst CreateInstanceByTemplate = (props: {\n    onSuccess: (contract: CompiledContract) => void,\n    onCancel: () => void,\n    visible: boolean,\n}) => {\n    const web3 = new Web3((window as any).ethereum);\n\n    const [form] = Form.useForm();\n    const [confirmLoading, setConfirmLoading] = useState(false);\n\n    useEffect(() => {\n        return function cleanup() {\n            form.resetFields();\n            setConfirmLoading(false);\n        }\n    })\n\n    const handleCancel = (e: any) => {\n        props.onCancel();\n    };\n\n    const handleOk = (e: any) => {\n\n        const formData = form.getFieldsValue();\n\n        if (\n            formData.template_index === undefined ||\n            formData.contract_address === undefined ||\n            !/^0x([0-9]|[a-z]|[A-Z]){40}$/.test(formData.contract_address)\n        ) {\n            return;\n        }\n\n        setConfirmLoading(true)\n\n        const template = JSON.parse(JSON.stringify(templates[formData.template_index]))\n\n        setTimeout(() => {\n            web3.eth.getCode(formData.contract_address)\n                .then((codes) => {\n                    if (codes.length >= 10) {\n                        return web3.eth.net.getId();\n                    }\n                })\n                .then((networkid) => {\n\n                    if (networkid === undefined) {\n                        throw new Error(\"无法获取网络ID\");\n                    }\n\n                    template.contractName = formData.contract_name;\n                    template.networks = { }\n                    template.networks[networkid.toString()] = {\n                        address: formData.contract_address\n                    }\n\n                    props.onSuccess(template);\n                })\n                .catch(e => {\n                    console.log(e);\n                })\n                .finally(() => {\n                    setConfirmLoading(false);\n                })\n        }, 1000);\n    };\n\n    return (\n        <Modal\n            width=\"60%\"\n            title=\"通过模版ABI创建\"\n            visible={props.visible}\n            okText=\"Check And Create\"\n            confirmLoading={confirmLoading}\n            maskClosable={false}\n            centered={true}\n            destroyOnClose={true}\n            onOk={handleOk}\n            onCancel={handleCancel}\n            okButtonProps={{\n                htmlType: \"submit\",\n                type: \"primary\",\n                size: \"middle\"\n            }}\n        >\n            <Form form={form}>\n                <Form.Item\n                    label=\"模板\"\n                    name=\"template_index\"\n                    rules={[{ required: true, message: 'Please input your username!' }]}\n                    style={{\n                        marginTop: '20px',\n                        width: '100%',\n                    }}\n                    labelAlign={\"right\"}\n                >\n                    <Select placeholder=\"--请选择模板--\">\n                        {\n                            templates.map((item, index) =>\n                                <Option value={index} key={index}>{item.contractName}</Option>\n                            )\n                        }\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    label=\"名称\"\n                    name=\"contract_name\"\n                    required\n                    labelAlign={\"right\"}\n                >\n                    <Input allowClear />\n                </Form.Item>\n                <Form.Item\n                    label=\"地址\"\n                    name=\"contract_address\"\n                    rules={[{ pattern: new RegExp('^0x([0-9]|[a-z]|[A-Z]){40}$'), required: true, message: '请输入一个正确的十六进制地址，已0x开头' }]}\n                    labelAlign={\"right\"}\n                >\n                    <Input allowClear />\n                </Form.Item>\n            </Form>\n        </Modal >\n    );\n}\n\nexport default CreateInstanceByTemplate;","import Web3 from \"web3\";\nimport \"antd/dist/antd.css\";\nimport { Space, Layout, PageHeader, Descriptions, Collapse, message } from 'antd';\nimport { ABIDeployCallerView, CompiledContract, SourceCodeCard } from \"..\"\n\nimport moment from \"moment\";\nimport copy from 'copy-to-clipboard';\n\nimport {\n    CopyOutlined,\n} from '@ant-design/icons';\n\nexport function Deployer(props: {\n    contract: CompiledContract,\n    onDeployed: (contract: CompiledContract) => void,\n}) {\n    const { contract } = props;\n    const matadata = (contract as any).metadata !== undefined ? JSON.parse((contract as any).metadata) : undefined;\n\n    const web3 = new Web3((window as any).ethereum);\n\n    return (\n        <Layout.Content title=\"title\" style={{\n            minHeight: '100%',\n            background: 'white',\n            borderLeftColor: '#EAEAEA',\n            borderLeftWidth: '1px',\n            borderLeftStyle: 'solid'\n        }}>\n            <PageHeader\n                ghost={false}\n                title={contract.contractName}\n            />\n            <Descriptions\n                title=\"Infomations\"\n                bordered\n                style={{\n                    marginLeft: '20px',\n                    marginRight: '20px',\n                }}\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Descriptions.Item label=\"Name\">{contract.contractName}</Descriptions.Item>\n                <Descriptions.Item label=\"Compiler\">\n                    {\n                        contract.compiler?.name === undefined ? \"None\" : contract.compiler?.name\n                    }\n                </Descriptions.Item>\n                <Descriptions.Item label=\"CompilerVersion\">\n                    {\n                        contract.compiler?.version === undefined ? \"None\" : contract.compiler?.version\n                    }\n                </Descriptions.Item>\n                <Descriptions.Item label=\"EvmVersion\">\n                    {matadata!.settings.evmVersion}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Optimizer\">\n                    {matadata!.settings.optimizer.enabled.toString()}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Runs\">\n                    {matadata!.settings.optimizer.runs}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"UpdateTime\">\n                    {\n                        contract.compiler?.version === undefined ? \"None\" : moment(contract.updatedAt).format('YYYY-MM-DD HH:mm:ss')\n                    }\n                </Descriptions.Item>\n            </Descriptions>\n            <Collapse\n                expandIconPosition=\"left\"\n                collapsible=\"header\"\n                style={{\n                    marginLeft: '20px',\n                    marginRight: '20px',\n                    borderTopStyle: 'none',\n                    borderColor: '#f0f0f0',\n                }}>\n                <Collapse.Panel\n                    header=\"SourceCode\"\n                    key=\"1\"\n                    extra={\n                        <Space onClick={\n                            _ => {\n                                copy(contract.source);\n                                const key = '1'\n                                message.loading({ content: 'Copying...', key });\n                                setTimeout(() => {\n                                    message.success({ content: 'Copied!', key, duration: 2 });\n                                }, 1000);\n                            }\n                        } >\n                            <CopyOutlined />\n                            复制\n                        </Space>\n                    }>\n                    <SourceCodeCard sourceCode={(contract.source as string).replaceAll(/\\n\\n\\n/g, \"\")} />\n                </Collapse.Panel>\n            </Collapse>\n            <ABIDeployCallerView\n                web3={web3}\n                compileContract={props.contract}\n                className=\"marginCard\"\n                style={{\n                    paddingBottom: '50px'\n                }}\n                onDeployed={props.onDeployed}\n            />\n        </Layout.Content >\n    )\n}","import \"antd/dist/antd.css\";\nimport { useState } from \"react\";\nimport { Table, Modal, Button, Space } from 'antd';\nimport { CompiledContract } from \"../../components\";\nimport { Deployer } from \"../../components/deployer\";\n\nimport './index.scss';\n\nconst templates: Array<CompiledContract> = [\n    require('../../assets/contract-templates/build/contracts/ERC20TemplateToken.json'),\n]\n\ntype deployStep = 'select_template' | 'deploy_infomation'\n\ninterface TemplateType {\n    key: string,\n    template_name: string,\n    description: string\n}\n\nconst DeployInstanceByTemplate = (props: {\n    onSuccess: (contract: CompiledContract) => void,\n    onCancel: () => void,\n    visible: boolean,\n}) => {\n\n    const [step, setStep] = useState<deployStep>('select_template');\n\n    const handleCancel = (e: any) => {\n        props.onCancel();\n    };\n\n    const footer = () =>\n        <Space className=\"footer-actions\">\n            {\n                step === 'deploy_infomation'\n                    ? null\n                    : <Button className=\"action\" size=\"middle\" type=\"primary\" onClick={_ => {\n                        setStep('deploy_infomation')\n                    }}>下一步</Button>\n            }\n        </Space>\n\n    const handleOk = (e: any) => {\n        if (step === 'select_template') {\n            setStep('deploy_infomation')\n        }\n    };\n\n    return (\n        <Modal\n            className=\"select-template\"\n            width={\n                step === 'select_template' ? '60%' : '80%'\n            }\n            title=\"通过模版ABI创建\"\n            visible={props.visible}\n            centered={step === 'select_template'}\n            destroyOnClose={true}\n            onOk={handleOk}\n            onCancel={handleCancel}\n            footer={footer()}\n        >\n            {\n                step === 'select_template'\n                    ? <Table className=\"template-tables\"\n                        rowSelection={{\n                            type: 'radio',\n                            onChange: (selectedRowKeys: React.Key[], selectedRows: TemplateType[]) => {\n                                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n                            },\n                            getCheckboxProps: (record: TemplateType) => ({\n                                disabled: record.template_name === 'Disabled User', // Column configuration not to be checked\n                                name: record.template_name,\n                            }),\n                        }}\n                        pagination={false}\n                        showHeader={false}\n                        columns={[\n                            {\n                                title: '模版名称',\n                                dataIndex: 'template_name',\n                                key: 'template_name',\n                                render: (text: string) => <span>{text}</span>\n                            },\n                            {\n                                title: '描述',\n                                dataIndex: 'description',\n                                key: 'description',\n                                render: (text: string) => <span>{text}</span>\n                            }\n                        ]}\n                        dataSource={[\n                            {\n                                key: '1',\n                                template_name: templates[0].contractName + '1',\n                                description: \"模版描述，模版描述，模版描述\"\n                            },\n                            {\n                                key: '2',\n                                template_name: templates[0].contractName + '2',\n                                description: \"模版描述，模版描述，模版描述\"\n                            },\n                            {\n                                key: '3',\n                                template_name: templates[0].contractName + '3',\n                                description: \"模版描述，模版描述，模版描述\"\n                            },\n                            {\n                                key: '4',\n                                template_name: templates[0].contractName + '4',\n                                description: \"模版描述，模版描述，模版描述\"\n                            }\n                        ]}\n                    />\n                    : null\n            }\n            {\n                step === 'deploy_infomation'\n                    ? <Deployer contract={templates[0]} onDeployed={contractInstance => {\n                        props.onSuccess(contractInstance)\n                    }} />\n                    : null\n            }\n        </Modal >\n    );\n}\n\nexport default DeployInstanceByTemplate;","import { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Row, Button } from 'antd';\nimport Dragger from \"antd/lib/upload/Dragger\";\nimport './index.scss';\n\nimport CreateInstanceByTemplate from \"./create_by_template\";\nimport DeployInstanceByTemplate from \"./deploy_by_template\";\n\nimport {\n    ImportOutlined,\n    PlusCircleOutlined,\n    UploadOutlined,\n    SubnodeOutlined\n} from '@ant-design/icons';\nimport { CompiledContract } from \"../../components\";\n\ntype ImportModalTyps = 'create_by_template' | 'import_by_url' | 'deploy_by_template' | undefined;\n\nexport function ContractImport(params: {\n    onDropContractFile: (e: any) => void,\n    onCheckedCompiledContract: (contract: CompiledContract) => void,\n}) {\n    const { onDropContractFile, onCheckedCompiledContract } = params;\n\n    const [modalState, setModalState] = useState<ImportModalTyps>(undefined);\n\n    return (\n        <Dragger\n            className=\"dragger\"\n            itemRender={() => {\n                return null\n            }}\n            openFileDialogOnClick={false}\n            onDrop={onDropContractFile}\n            directory\n        >\n            <CreateInstanceByTemplate\n                visible={modalState === 'create_by_template'}\n                onCancel={() => {\n                    setModalState(undefined)\n                }}\n                onSuccess={(contract) => {\n                    setModalState(undefined)\n                    onCheckedCompiledContract(contract);\n                }}\n            />\n            <DeployInstanceByTemplate\n                visible={modalState === 'deploy_by_template'}\n                onCancel={() => {\n                    setModalState(undefined)\n                }}\n                onSuccess={(contract) => {\n                    setModalState(undefined)\n                    onCheckedCompiledContract(contract);\n                }}\n            />\n            <p className=\"ant-upload-drag-icon\"><UploadOutlined /></p>\n            <p className=\"ant-upload-text\">点击上传或者拖动文件至本区域</p>\n            <p className=\"ant-upload-hint\">\n                仅支持标准的Compiled Contract 格式，比如truffle compile输出的文件，请注意确保是已部署的实例，请检查其中必须包含，abi，networks，字段。\n            </p>\n            <Row className=\"action-button-group\">\n                {\n                    [\n                        {\n                            ghost: false,\n                            icon: <PlusCircleOutlined />,\n                            labelText: '通过模版ABI创建',\n                            modalType: 'create_by_template' as ImportModalTyps\n                        },\n                        {\n                            ghost: false,\n                            icon: <SubnodeOutlined />,\n                            labelText: '根据模版创部署新合约实例',\n                            modalType: 'deploy_by_template' as ImportModalTyps\n                        },\n                        {\n                            ghost: true,\n                            icon: <ImportOutlined />,\n                            labelText: '通过URL导入(暂未实现)',\n                            modalType: 'import_by_url' as ImportModalTyps\n                        },\n                    ].map(\n                        (item) =>\n                            <Button\n                                ghost={item.ghost}\n                                disabled={item.ghost}\n                                className=\"action\"\n                                type=\"primary\"\n                                size=\"large\"\n                                icon={item.icon}\n                                onClick={() => {\n                                    setModalState(item.modalType)\n                                }}\n                                style={{\n                                    marginBottom: \"10px\"\n                                }}\n                            >\n                                {item.labelText}\n                            </Button>\n                    )\n                }\n            </Row>\n        </Dragger>\n\n    )\n}","import Web3 from \"web3\";\nimport { useState } from 'react';\nimport { Layout, Menu, Button } from 'antd';\nimport { MenuClickEventHandler } from 'rc-menu/lib/interface';\n\nimport {\n    ProfileFilled,\n    AreaChartOutlined,\n    BarChartOutlined,\n    UserOutlined,\n    UploadOutlined,\n    SettingFilled,\n} from '@ant-design/icons';\n\nimport * as utils from '../../../utils'\nimport { CompiledContract } from '../../../components'\n\nimport './index.scss'\n\nfunction ContractMenu(props: {\n    contracts: CompiledContract[],\n    onSelected: MenuClickEventHandler,\n    onDropFile: (e: any) => void,\n}) {\n    const web3 = new Web3((window as any).ethereum);\n\n    const [ownerAddress, setOwnerAddress] = useState<string | undefined>(\"\");\n\n    try {\n        (web3.currentProvider as any).sendAsync({\n            method: \"eth_requestAccounts\"\n        }, (error: Error, response: any) => {\n            if (error == null) {\n                setOwnerAddress(response.result[0]);\n                return;\n            }\n        })\n    } catch (e) {\n        setOwnerAddress(undefined)\n    }\n\n    function MenuHeader() {\n        return (\n            <Button\n                style={{\n                    width: '100%',\n                    height: '50px',\n                }}\n                size=\"middle\"\n                type=\"primary\"\n                icon={<UserOutlined />}\n                danger={ownerAddress !== undefined && ownerAddress.length <= 0}\n            >\n            </Button>\n        )\n    }\n\n    return (\n        <Layout.Sider\n            width='20vw'\n            theme=\"light\"\n            style={{\n                overflow: 'auto',\n                height: '100vh',\n                position: 'fixed',\n                left: 0,\n            }}\n            breakpoint='md'>\n            <MenuHeader />\n            <Menu\n                mode=\"inline\"\n                theme=\"light\"\n                style={{ height: '100%', borderRight: 1 }}\n            >\n                {\n                    props.contracts.map((contractObject, contractIndex) => {\n                        return (\n                            <Menu.SubMenu\n                                key={contractObject.contractName}\n                                icon={<ProfileFilled />}\n                                title={contractObject.contractName}>\n                                <Menu.Item\n                                    key={`${contractObject.contractName}-setting`}\n                                    onClick={props.onSelected}\n                                    icon={<SettingFilled />}\n                                >\n                                    \b合约信息\n                                </Menu.Item>\n                                <Menu.SubMenu\n                                    key={`${contractObject.contractName}-function`}\n                                    title=\"函数调用\"\n                                    icon={<AreaChartOutlined />}\n                                >\n                                    {\n                                        contractObject.abi.filter((abiFun) => {\n                                            return abiFun.type === 'function'\n                                        }).map((abi, index) => {\n                                            const funSignFormat = utils.functionFormatStringFromABI(abi);\n                                            return (\n                                                <Menu.Item\n                                                    key={web3.eth.abi.encodeFunctionSignature(abi)}\n                                                    onClick={props.onSelected}\n                                                >\n                                                    {\n                                                        contractObject.userdoc !== undefined && contractObject.userdoc.methods[funSignFormat] !== undefined\n                                                            ? contractObject.userdoc.methods[funSignFormat].notice\n                                                            : abi.name\n                                                    }\n                                                </Menu.Item>\n                                            )\n                                        })\n                                    }\n                                </Menu.SubMenu>\n                                <Menu.SubMenu\n                                    key={`${contractObject.contractName}-event`}\n                                    title=\"事件查询\"\n                                    icon={<BarChartOutlined />}\n                                >\n                                    {\n                                        contractObject.abi.filter((abiFun) => {\n                                            return abiFun.type === 'event'\n                                        }).map((abi, index) => {\n                                            return (\n                                                <Menu.Item\n                                                    // key={`${contractObject.contractName}-event-${index}`}\n                                                    key={web3.eth.abi.encodeFunctionSignature(abi)}\n                                                    onClick={props.onSelected}>\n                                                    {\n                                                        abi.name\n                                                    }\n                                                </Menu.Item>\n                                            )\n                                        })\n                                    }\n                                </Menu.SubMenu>\n                            </Menu.SubMenu>\n                        )\n                    })\n                }\n                {\n                    <Menu.Item\n                        key='upload'\n                        icon={<UploadOutlined />}\n                        onClick={props.onSelected}\n                    >\n                        Upload Contract\n                    </Menu.Item>\n                }\n\n            </Menu>\n        </Layout.Sider>\n\n\n    );\n}\n\nexport default ContractMenu;","import Web3 from 'web3';\nimport 'antd/dist/antd.css';\nimport { useState } from 'react';\nimport { Layout, Result } from 'antd';\nimport { MenuInfo } from 'rc-menu/lib/interface';\nimport { FunctionContent } from './content';\nimport { ContractSetting } from \"./contract_setting\";\nimport { CompiledContract } from '../../components';\nimport { ContractImport } from \"../contract_importer\";\nimport ContractMenu from \"./contract_menu\";\n\nimport * as StateCreator from \"./states\";\n\nfunction readContractAsync(file: any) {\n    return new Promise<CompiledContract>((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.readAsText(file);\n        reader.onload = () => {\n            // 去除不需要的字段\n            const longContract = JSON.parse(reader.result as string) as CompiledContract;\n            const shotContract = {\n                contractName: longContract.contractName,\n                abi: longContract.abi,\n                networks: longContract.networks,\n                userdoc: longContract.userdoc,\n                devdoc: longContract.devdoc,\n                source: (longContract as any).source,\n                updatedAt: (longContract as any).updatedAt,\n                compiler: (longContract as any).compiler,\n            }\n            return resolve(shotContract);\n        }\n    })\n}\n\nexport default function ContractLookupPage() {\n    const web3 = new Web3((window as any).ethereum);\n\n    const [contracts, setContracts] = useState<CompiledContract[]>([]);\n    const [netWorkID, setNetWorkID] = useState<number>();\n    const [contentState, setContetState] = useState<StateCreator.ContentViewState>(StateCreator.UploadState());\n\n    web3.eth.net.getId().then((netID) => {\n        setNetWorkID(netID);\n    });\n\n    // 主菜单点击\n    function onMenuSelect(info: MenuInfo): void {\n\n        const paths = info.keyPath\n        if (paths.length <= 0) {\n            return;\n        }\n\n        switch (paths.length) {\n            case 1: {\n                switch (paths[0]) {\n                    case 'upload': {\n                        setContetState(StateCreator.UploadState());\n                        break;\n                    }\n                }\n                break;\n            }\n\n            // 二级菜单点击\n            case 2: {\n                const contract = contracts.find((c) => c.contractName === paths[paths.length - 1]);\n                if (contract !== undefined) {\n                    if (paths.length === 2 && paths[0] === `${contract.contractName}-setting`) {\n                        setContetState(StateCreator.SettingState(contract))\n                    }\n                }\n                break;\n            }\n\n            // 三级菜单点击\n            case 3: {\n                const contract = contracts.find((c) => c.contractName === paths[paths.length - 1]);\n                if (contract !== undefined) {\n                    if (\n                        paths.length === 3 &&\n                        (\n                            paths[1] === `${contract.contractName}-function` ||\n                            paths[1] === `${contract.contractName}-event`\n                        )\n                    ) {\n                        const abi = contract.abi?.find((a) => (a.type === 'function' || a.type === 'event') && web3.eth.abi.encodeFunctionSignature(a) === paths[0])\n                        if (abi !== undefined) {\n                            setContetState(StateCreator.ABIState(\n                                contract,\n                                abi\n                            ))\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    function RenderContentView() {\n\n        if (netWorkID === undefined) {\n            return null\n        }\n\n        switch (contentState.type) {\n            case 'method': {\n                return (\n                    <FunctionContent\n                        contract={(contentState as StateCreator.ContractMethodState).contract!}\n                        abi={(contentState as StateCreator.ContractMethodState).abi!}\n                        networkID={netWorkID}\n                    />\n                )\n            }\n\n            case 'setting': {\n                return (\n                    <ContractSetting\n                        contract={(contentState as StateCreator.ContractSettingState).contract!}\n                        networkID={netWorkID}\n                    />\n                )\n            }\n\n            case 'upload': {\n                return <ContractImport\n                    onCheckedCompiledContract={\n                        contract => {\n                            setContracts(contracts.concat(contract));\n                        }\n                    }\n                    onDropContractFile={\n                        (e) => {\n                            let files = e.dataTransfer.files;\n                            let readers = [];\n\n                            for (let i = 0; i < files.length; i++) {\n                                readers.push(readContractAsync(files[i]))\n                            }\n\n                            Promise.all(readers).then(dropedContract => {\n                                setContracts(contracts.concat(dropedContract));\n                            })\n                        }\n                    } />\n            }\n\n            default: {\n                return (\n                    <Layout.Content style={{\n                        minHeight: '100%',\n                        background: 'white',\n                    }}>\n                        <Result\n                            status=\"404\"\n                            title=\"无效菜单路径\"\n                            subTitle=\"抱歉，你选择的菜单似乎没有找到对应的内容。\"\n                        />\n                    </Layout.Content>\n                )\n            }\n        }\n    }\n\n    return (\n        netWorkID === undefined\n            ? null\n            : <Layout>\n                <ContractMenu\n                    contracts={contracts}\n                    onSelected={onMenuSelect}\n                    onDropFile={\n                        (e) => {\n                            let files = e.dataTransfer.files;\n                            let readers = [];\n\n                            for (let i = 0; i < files.length; i++) {\n                                readers.push(readContractAsync(files[i]))\n                            }\n\n                            Promise.all(readers).then(dropedContract => {\n                                setContracts(contracts.concat(dropedContract));\n                            })\n                        }\n                    }\n                />\n                <Layout className=\"site-layout\">\n                    <Layout.Sider\n                        width=\"80vw\"\n                        style={{\n                            marginLeft: '20vw',\n                            overflow: 'auto',\n                            position: 'fixed',\n                            width: '100%',\n                            height: '100%',\n                            left: 0,\n                        }}\n                    >\n                        <RenderContentView />\n                    </Layout.Sider>\n                </Layout>\n            </Layout>\n    )\n}\n","import { AbiItem } from 'web3-utils';\nimport { CompiledContract } from \"../../components/compile_contract\";\n\nexport type Types = 'setting' | 'upload' | 'method';\n\n// 抽象\nexport interface ContentViewState {\n    type: Types\n}\n\n// 设置页面\nexport interface ContractSettingState extends ContentViewState {\n    contract: CompiledContract\n}\n\n// abi页面包含function和event\nexport interface ContractMethodState extends ContentViewState {\n    contract: CompiledContract,\n    abi: AbiItem\n}\n\nexport const SettingState = (contract: CompiledContract): ContractSettingState => {\n    return {\n        type: 'setting',\n        contract: contract\n    }\n}\n\nexport const ABIState = (contract: CompiledContract, abi: AbiItem): ContractMethodState => {\n    return {\n        type: 'method',\n        contract: contract,\n        abi: abi,\n    }\n}\n\nexport const UploadState = (): ContentViewState => { return { type: 'upload' } }","import { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport ContractLookupPage from './contract_lookup';\n\nconst BasicRoute = () => (\n    <HashRouter>\n        <Switch>\n            <Route exact path=\"/\">\n                <Redirect to=\"/lookup\" />\n            </Route>\n            <Route exact path=\"/lookup\" component={ContractLookupPage} />\n        </Switch>\n    </HashRouter>\n);\n\nexport default BasicRoute;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BasicRoute from './views/router';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BasicRoute />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}